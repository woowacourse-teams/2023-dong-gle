{"version":3,"file":"components-Category-WritingList-WritingList-stories.e70878b0.iframe.bundle.js","mappings":";;;;;;;AA4FA;;;AAGA;;AAIA;;;AAGA;;;;;;;;;;AAYA;;;;;;;;;AAWA;;AAIA;AACA;;;;;;AAQA;;AAEA;;;;AAMA;;;;;AAOA;;;AAGA;AAGA;;;;;;;;;;;ACvIA","sources":["webpack://frontend/./src/components/Category/WritingList/WritingList.tsx","webpack://frontend/./src/components/DeleteButton/DeleteButton.tsx"],"sourcesContent":["import { WritingIcon } from 'assets/icons';\nimport { usePageNavigate } from 'hooks/usePageNavigate';\nimport { styled, css } from 'styled-components';\nimport { useWritings } from './useWritings';\nimport DeleteButton from 'components/DeleteButton/DeleteButton';\nimport { useDeleteWritings } from './useDeleteWritings';\nimport { useGlobalStateValue } from '@yogjin/react-global-state';\nimport { activeWritingInfoState } from 'globalState';\nimport { DragEvent } from 'react';\nimport { INDEX_POSITION, LAST_DRAG_SECTION_ID } from 'constants/drag';\n\ntype Props = {\n  categoryId: number;\n  isOpen: boolean;\n  dragOverIndexList: number[];\n  onDragStart: (...ids: number[]) => (e: DragEvent) => void;\n  onDragEnter: (...ids: number[]) => (e: DragEvent) => void;\n  onDragEnd: (e: DragEvent) => void;\n  isWritingDragging: boolean;\n};\n\nconst WritingList = ({\n  categoryId,\n  isOpen,\n  dragOverIndexList,\n  onDragStart,\n  onDragEnter,\n  onDragEnd,\n  isWritingDragging,\n}: Props) => {\n  const { goWritingPage } = usePageNavigate();\n  const { writings } = useWritings(categoryId, isOpen);\n  const activeWritingInfo = useGlobalStateValue(activeWritingInfoState);\n  const writingId = activeWritingInfo?.id;\n  const deleteWritings = useDeleteWritings();\n\n  const isWritingDragOverTarget = (categoryId: number, writingId: number) =>\n    isWritingDragging &&\n    categoryId === dragOverIndexList[INDEX_POSITION.CATEGORY_ID] &&\n    writingId === dragOverIndexList[INDEX_POSITION.WRITING_ID];\n\n  if (!writings || writings?.length === 0) return <S.NoWritingsText>빈 카테고리</S.NoWritingsText>;\n\n  return (\n    <ul>\n      {writings.map((writing) => (\n        <S.Item\n          key={writing.id}\n          $isClicked={writingId === writing.id}\n          $isDragOverTarget={isWritingDragOverTarget(categoryId, writing.id)}\n          draggable={true}\n          onDragStart={onDragStart(categoryId, writing.id)}\n          onDragEnter={onDragEnter(categoryId, writing.id)}\n          onDragEnd={onDragEnd}\n        >\n          <S.Button\n            aria-label={`${writing.title}글 메인화면에 열기`}\n            onClick={() =>\n              goWritingPage({ categoryId, writingId: writing.id, isDeletedWriting: false })\n            }\n          >\n            <S.IconWrapper>\n              <WritingIcon width={14} height={14} />\n            </S.IconWrapper>\n            <S.Text>{writing.title}</S.Text>\n          </S.Button>\n          <S.DeleteButtonWrapper>\n            <DeleteButton\n              onClick={() => deleteWritings([writing.id])}\n              aria-label={`${writing.title}글 삭제`}\n            />\n          </S.DeleteButtonWrapper>\n        </S.Item>\n      ))}\n      <S.DragLastSection\n        onDragEnter={onDragEnter(categoryId, LAST_DRAG_SECTION_ID)}\n        $isDragOverTarget={isWritingDragOverTarget(categoryId, LAST_DRAG_SECTION_ID)}\n      />\n    </ul>\n  );\n};\n\nexport default WritingList;\n\nconst S = {\n  Item: styled.li<{ $isClicked: boolean; $isDragOverTarget: boolean }>`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    height: 3.6rem;\n    border-radius: 4px;\n    background-color: ${({ theme, $isClicked }) => $isClicked && theme.color.gray4};\n    border-top: 0.4rem solid transparent;\n\n    ${({ $isDragOverTarget }) =>\n      $isDragOverTarget &&\n      css`\n        border-radius: 0;\n        border-top: 0.4rem solid ${({ theme }) => theme.color.dragArea};\n      `};\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray3};\n\n      & > button {\n        padding-right: 2.8rem;\n      }\n\n      div {\n        opacity: 0.99;\n      }\n    }\n  `,\n\n  Button: styled.button`\n    display: flex;\n    align-items: center;\n    gap: 0.4rem;\n    width: 100%;\n    min-width: 0;\n    height: 100%;\n    padding: 0.4rem 0 0.4rem 3.2rem;\n    border-radius: 4px;\n  `,\n\n  IconWrapper: styled.div`\n    flex-shrink: 0;\n  `,\n\n  Text: styled.p`\n    color: ${({ theme }) => theme.color.gray9};\n    font-size: 1.4rem;\n    font-weight: 400;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  `,\n\n  NoWritingsText: styled.p`\n    padding: 0.4rem 0 0.4rem 3.2rem;\n    color: ${({ theme }) => theme.color.gray6};\n    font-size: 1.4rem;\n    font-weight: 500;\n    cursor: default;\n  `,\n\n  DeleteButtonWrapper: styled.div`\n    position: absolute;\n    right: 0;\n    margin-right: 0.8rem;\n    opacity: 0;\n  `,\n\n  DragLastSection: styled.div<{ $isDragOverTarget: boolean }>`\n    height: 0.4rem;\n    background-color: transparent;\n    ${({ $isDragOverTarget }) =>\n      $isDragOverTarget &&\n      css`\n        background-color: ${({ theme }) => theme.color.dragArea};\n      `};\n  `,\n};\n","import { TrashCanIcon } from 'assets/icons';\nimport { ComponentPropsWithoutRef } from 'react';\nimport { styled } from 'styled-components';\n\nconst DeleteButton = ({ ...rest }: ComponentPropsWithoutRef<'button'>) => {\n  return (\n    <S.Button {...rest}>\n      <TrashCanIcon width={12} height={12} aria-label='휴지통 아이콘' />\n    </S.Button>\n  );\n};\n\nexport default DeleteButton;\n\nconst S = {\n  Button: styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 2rem;\n    height: 2.4rem;\n    border-radius: 4px;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray5};\n    }\n  `,\n};\n"],"names":[],"sourceRoot":""}