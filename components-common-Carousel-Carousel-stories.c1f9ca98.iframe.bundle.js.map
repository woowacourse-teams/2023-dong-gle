{"version":3,"file":"components-common-Carousel-Carousel-stories.c1f9ca98.iframe.bundle.js","mappings":";;AA0CA;;;AAAA;;;;;;;;;;ACAA;;AAIA;;;;;;;;;;;;;;;;;ACTA;;;AAKA;;;;AAIA;;;;ACHA;AACA;;AAIA;;;;;;AAMA;AAIA","sources":["webpack://frontend/./src/components/@common/Carousel/Media/Media.tsx","webpack://frontend/./src/components/@common/Carousel/Pagination/Pagination.tsx","webpack://frontend/./src/components/@common/Carousel/Indicator/Indicator.tsx","webpack://frontend/./src/components/@common/Carousel/Carousel.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport type Media = {\n  type:\n    | 'image/jpeg'\n    | 'image/png'\n    | 'image/webp'\n    | 'image/avif'\n    | 'image/gif'\n    | 'video/mp4'\n    | 'video/webm';\n\n  src: string;\n  alt?: string;\n};\n\ntype Props = {\n  media: Media;\n};\n\nconst Media = ({ media }: Props) => {\n  const { type, src, alt } = media;\n\n  return (\n    <S.Media>\n      {type.startsWith('video/') ? (\n        <video controls autoPlay playsInline loop>\n          <source src={src} type={type} />\n          비디오를 지원하지 않는 브라우저입니다.\n        </video>\n      ) : (\n        <picture>\n          <source srcSet={src} type={type} />\n          <img src={src} alt={alt ?? '캐러셀의 컨텐츠'} />\n        </picture>\n      )}\n    </S.Media>\n  );\n};\n\nexport default Media;\n\nconst CommonMediaStyles = `\n  width: 100%;\n  height: 100%;\n`;\n\nconst S = {\n  Media: styled.li`\n    flex: 0 0 auto;\n    ${CommonMediaStyles}\n\n    picture, img, video {\n      ${CommonMediaStyles}\n    }\n  `,\n};\n","import styled, { css } from 'styled-components';\nimport { LeftArrowHeadIcon as ArrowIcon } from 'assets/icons';\nimport { Dispatch } from 'react';\nimport { Media } from '../Media/Media';\n\ntype Direction = 'left' | 'right';\n\ntype Props = {\n  direction: Direction;\n  medias: Media[];\n  activeIndex: number;\n  setActiveIndex: Dispatch<React.SetStateAction<number>>;\n};\n\nconst Pagination = ({ direction, medias, activeIndex, setActiveIndex }: Props) => {\n  const updateMediaIndex = () => {\n    const indexUpdater = {\n      left: activeIndex === 0 ? medias.length - 1 : activeIndex - 1,\n      right: (activeIndex + 1) % medias.length,\n    };\n\n    setActiveIndex(indexUpdater[direction]);\n  };\n\n  return (\n    <S.ActiveButton $direction={direction} onClick={updateMediaIndex}>\n      <ArrowIcon width={20} height={36} />\n    </S.ActiveButton>\n  );\n};\n\nexport default Pagination;\n\nconst S = {\n  ActiveButton: styled.button<{ $direction: Direction }>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n\n    ${({ $direction }) =>\n      $direction === 'left'\n        ? css`\n            left: 0rem;\n          `\n        : css`\n            right: 0rem;\n            svg {\n              transform: rotate(180deg);\n            }\n          `}\n\n    width: 4rem;\n    height: 100%;\n    z-index: 999;\n  `,\n};\n","import { Dispatch } from 'react';\nimport styled from 'styled-components';\n\ntype Props = {\n  length: number;\n  activeIndex: number;\n  setActiveIndex: Dispatch<React.SetStateAction<number>>;\n};\n\nconst Indicator = ({ length, activeIndex, setActiveIndex }: Props) => {\n  const changeActiveIndexOnClick = (index: number) => setActiveIndex(index);\n\n  return (\n    <S.Indicator>\n      {Array.from({ length }, (_, index) => (\n        <li key={index}>\n          <S.ControlButton onClick={() => changeActiveIndexOnClick(index)}>\n            <S.Bar $isActive={index === activeIndex} />\n          </S.ControlButton>\n        </li>\n      ))}\n    </S.Indicator>\n  );\n};\n\nexport default Indicator;\n\nconst S = {\n  Indicator: styled.ul`\n    display: flex;\n    gap: 8px;\n    position: absolute;\n    left: 50%;\n    transform: translate(-50%, 0%);\n    bottom: 16px;\n  `,\n\n  ControlButton: styled.button`\n    width: 60px;\n    height: 20px;\n  `,\n\n  Bar: styled.div<{ $isActive: boolean }>`\n    width: 100%;\n    height: 4px;\n    border-radius: 2px;\n    background-color: ${({ $isActive, theme }) =>\n      $isActive ? theme.color.gray8 : theme.color.gray6};\n  `,\n};\n","import { useState } from 'react';\nimport styled from 'styled-components';\nimport Media, { Media as MediaType } from './Media/Media';\nimport Pagination from './Pagination/Pagination';\nimport Indicator from './Indicator/Indicator';\n\ntype Props = {\n  medias: MediaType[];\n  width?: string;\n  height?: string;\n};\n\nconst Carousel = ({ medias, width = '640px', height = '360px' }: Props) => {\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  return (\n    <S.Carousel $width={width} $height={height}>\n      <Pagination\n        direction='left'\n        medias={medias}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n      />\n      <S.MediaAnimationContainer $translateX={`-${activeIndex * 100}%`}>\n        {medias.map((media, index) => (\n          <Media key={index} media={media} />\n        ))}\n      </S.MediaAnimationContainer>\n      <Pagination\n        direction='right'\n        medias={medias}\n        activeIndex={activeIndex}\n        setActiveIndex={setActiveIndex}\n      />\n      <Indicator length={medias.length} activeIndex={activeIndex} setActiveIndex={setActiveIndex} />\n    </S.Carousel>\n  );\n};\n\nconst S = {\n  Carousel: styled.div<{ $width: string; $height: string }>`\n    display: flex;\n    position: relative;\n    width: ${({ $width }) => $width};\n    height: ${({ $height }) => $height};\n    overflow: hidden;\n  `,\n\n  MediaAnimationContainer: styled.ul<{ $translateX: string }>`\n    display: flex;\n    width: 100%;\n    height: 100%;\n\n    transition: all 0.5s ease-in-out;\n    transform: translateX(${({ $translateX }) => $translateX});\n  `,\n};\n\nexport default Carousel;\n"],"names":[],"sourceRoot":""}