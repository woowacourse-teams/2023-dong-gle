{"version":3,"file":"components-Category-Category-Category-stories.8e53d599.iframe.bundle.js","mappings":";;;;;AA0HA;;AAEA;;;;AAMA;;;AAIA;;;;;AASA;;;AAzCA;;;AAIA;;;AAKA;AAiCA;AAxFA;AACA;;;;AAIA;AACA;;;AAIA;AACA;AACA;;;;;;AAMA;;;AAIA;AACA;;AAEA;;AAGA;AACA;;AAEA;;;;AAMA;;;AAsDA;;AAGA;AACA;AAEA;;;;;;AAMA;;;;;;;;;;;;;;AClDA;;;;;;;AASA;;;;;AAOA;AACA;;;;;AAOA;;;AAGA;;;;;;;AASA;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;;;;AC3IA;;;;;;;ACfA;;;;;AAaA;;;;AAAA;AACA","sources":["webpack://frontend/./src/components/@common/Input/Input.tsx","webpack://frontend/./src/components/Category/Category/Category.tsx","webpack://frontend/./src/components/DeleteButton/DeleteButton.tsx","webpack://frontend/./src/styles/storybook.ts"],"sourcesContent":["import type { ComponentPropsWithRef, ForwardedRef, ReactElement } from 'react';\nimport { forwardRef, useId } from 'react';\nimport { RuleSet, css, styled } from 'styled-components';\nimport { Size } from 'types/components/common';\n\nexport const InputVariant = ['outline', 'filled', 'unstyled', 'underlined'] as const;\nexport type InputVariant = (typeof InputVariant)[number];\n\ntype Props = {\n  size: Size;\n  labelText: string;\n  supportingText: string;\n  variant: InputVariant;\n  isError: boolean;\n} & Omit<ComponentPropsWithRef<'input'>, 'size'>;\n\nconst Input = (\n  {\n    size = 'medium',\n    labelText,\n    supportingText,\n    variant = 'outline',\n    isError = false,\n    ...rest\n  }: Partial<Props>,\n  ref: ForwardedRef<HTMLInputElement>,\n) => {\n  const inputId = useId();\n  return (\n    <S.InputContainer>\n      {labelText && (\n        <S.Label htmlFor={inputId} $required={rest.required} $variant={variant}>\n          {labelText}\n        </S.Label>\n      )}\n      <S.Input\n        id={inputId}\n        ref={ref}\n        $size={size}\n        $variant={variant}\n        $isError={isError}\n        {...rest}\n      />\n      {supportingText && <S.SupportingText $isError={isError}>{supportingText}</S.SupportingText>}\n    </S.InputContainer>\n  );\n};\n\nexport default forwardRef(Input);\n\nconst genVariantStyle = (\n  variant: Required<Props>['variant'],\n  isError: Required<Props>['isError'],\n): RuleSet<object> => {\n  const styles: Record<typeof variant, ReturnType<typeof genVariantStyle>> = {\n    outline: css`\n      ${({ theme }) => css`\n        border: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n        outline: 1px solid transparent;\n\n        &:focus {\n          border: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n          outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray8};\n        }\n      `}\n    `,\n    filled: css`\n      ${({ theme }) => css`\n        background-color: ${isError ? theme.color.red1 : theme.color.gray4};\n        border: 1px solid transparent;\n        outline: 1px solid transparent;\n\n        &:focus {\n          background-color: transparent;\n          outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray8};\n        }\n      `}\n    `,\n    unstyled: css`\n      ${({ theme }) => css`\n        border: 1px solid transparent;\n        outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray1};\n      `}\n    `,\n    underlined: css`\n      ${({ theme }) => css`\n        border: 1px solid transparent;\n        border-bottom: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n        border-radius: 0;\n        outline: 1px solid transparent;\n      `}\n    `,\n  };\n  return styles[variant];\n};\n\nconst genSizeStyle = (size: Required<Props>['size']): RuleSet<object> => {\n  const styles: Record<typeof size, ReturnType<typeof genSizeStyle>> = {\n    small: css`\n      padding: 0.6rem 0.6rem;\n      font-size: 1.3rem;\n    `,\n    medium: css`\n      padding: 0.8rem 1rem;\n      font-size: 1.4rem;\n    `,\n    large: css`\n      padding: 1rem 1.2rem;\n      font-size: 1.5rem;\n    `,\n  };\n  return styles[size];\n};\n\nconst S = {\n  InputContainer: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 0.6rem;\n    font-size: 1.3rem;\n  `,\n\n  Label: styled.label<{ $required: boolean | undefined; $variant: InputVariant }>`\n    font-weight: 500;\n    ${({ $required, theme }) =>\n      $required &&\n      css`\n        &::after {\n          content: '*';\n          margin-left: 0.2rem;\n          color: ${theme.color.red6};\n        }\n      `};\n  `,\n  Input: styled.input<{\n    $size: Size;\n    $variant: InputVariant;\n    $isError: boolean;\n  }>`\n    border: none;\n    border-radius: 4px;\n    background-color: transparent;\n\n    ${({ $size }) => genSizeStyle($size)};\n    ${({ $variant, $isError }) => genVariantStyle($variant, $isError)};\n\n    &::placeholder {\n      color: ${({ theme }) => theme.color.gray6};\n    }\n  `,\n  SupportingText: styled.p<{ $isError: boolean | undefined }>`\n    color: ${({ $isError, theme }) => ($isError ? theme.color.red6 : theme.color.gray7)};\n  `,\n  Underline: styled.div`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    height: 2px;\n    width: 100%;\n    background-color: ${({ theme }) => theme.color.primary};\n    transform: scaleX(0);\n    transition: all 0.3s ease;\n  `,\n};\n","import { PencilIcon } from 'assets/icons';\nimport { usePageNavigate } from 'hooks/usePageNavigate';\nimport { KeyboardEventHandler } from 'react';\nimport { styled } from 'styled-components';\nimport useUncontrolledInput from '../../../hooks/@common/useUncontrolledInput';\nimport { useCategoryMutation } from '../useCategoryMutation';\nimport Input from 'components/@common/Input/Input';\nimport DeleteButton from 'components/DeleteButton/DeleteButton';\nimport { useToast } from 'hooks/@common/useToast';\nimport { getErrorMessage } from 'utils/error';\nimport { validateCategoryName } from 'utils/validators';\n\ntype Props = {\n  categoryId: number;\n  categoryName: string;\n  isDefaultCategory: boolean;\n};\n\nconst Category = ({ categoryId, categoryName, isDefaultCategory }: Props) => {\n  const {\n    inputRef,\n    escapeInput: escapeRename,\n    isInputOpen,\n    openInput,\n    resetInput,\n    isError,\n    setIsError,\n  } = useUncontrolledInput();\n  const { updateCategoryTitle, deleteCategory } = useCategoryMutation();\n  const { goWritingTablePage } = usePageNavigate();\n  const toast = useToast();\n\n  const requestChangedName: KeyboardEventHandler<HTMLInputElement> = (e) => {\n    try {\n      if (e.key !== 'Enter') return;\n\n      const categoryName = e.currentTarget.value.trim();\n\n      validateCategoryName(categoryName);\n\n      updateCategoryTitle({\n        categoryId,\n        body: {\n          categoryName,\n        },\n      });\n\n      resetInput();\n    } catch (error) {\n      setIsError(true);\n      toast.show({ type: 'error', message: getErrorMessage(error) });\n    }\n  };\n\n  return (\n    <S.Container $isDefaultCategory={isDefaultCategory}>\n      {isInputOpen ? (\n        <Input\n          type='text'\n          variant='underlined'\n          size='small'\n          placeholder='변경할 카테고리 이름'\n          defaultValue={categoryName}\n          ref={inputRef}\n          isError={isError}\n          onBlur={resetInput}\n          onKeyDown={escapeRename}\n          onKeyUp={requestChangedName}\n          aria-label={`${categoryName} 카테고리 이름 수정 입력 창`}\n        />\n      ) : (\n        <>\n          <S.CategoryButton\n            onClick={() => goWritingTablePage(categoryId)}\n            aria-label={`${categoryName} 카테고리 메인 화면에 열기`}\n          >\n            <S.Text>{categoryName}</S.Text>\n          </S.CategoryButton>\n          {!isDefaultCategory && (\n            <S.IconContainer>\n              <S.Button aria-label={`${categoryName} 카테고리 이름 수정`} onClick={openInput}>\n                <PencilIcon width={12} height={12} />\n              </S.Button>\n              <DeleteButton\n                aria-label={`${categoryName} 카테고리 삭제`}\n                onClick={() => deleteCategory(categoryId)}\n              />\n            </S.IconContainer>\n          )}\n        </>\n      )}\n    </S.Container>\n  );\n};\n\nexport default Category;\n\nconst S = {\n  Container: styled.div<{ $isDefaultCategory: boolean }>`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 90%;\n    height: 3.6rem;\n    border-radius: 4px;\n    font-size: 1.4rem;\n\n    &:hover {\n      & > button {\n        padding-right: ${({ $isDefaultCategory }) => !$isDefaultCategory && '5.2rem'};\n      }\n\n      div {\n        opacity: 0.99;\n      }\n    }\n  `,\n\n  CategoryButton: styled.button`\n    flex: 1;\n    min-width: 0;\n    height: 100%;\n    text-align: left;\n  `,\n\n  Text: styled.p`\n    color: ${({ theme }) => theme.color.gray10};\n    font-weight: 600;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  `,\n\n  Input: styled.input`\n    border: none;\n    outline: none;\n    color: ${({ theme }) => theme.color.gray10};\n    font-size: 1.3rem;\n    font-weight: 600;\n\n    &::placeholder {\n      font-weight: 300;\n    }\n  `,\n\n  IconContainer: styled.div`\n    display: flex;\n    position: absolute;\n    right: 0;\n    margin-right: 0.8rem;\n    opacity: 0;\n  `,\n\n  Button: styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 2rem;\n    height: 2.4rem;\n    padding: 0.4rem;\n    border-radius: 4px;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray5};\n    }\n  `,\n};\n","import { TrashCanIcon } from 'assets/icons';\nimport { ComponentPropsWithoutRef } from 'react';\nimport { styled } from 'styled-components';\n\nconst DeleteButton = ({ ...rest }: ComponentPropsWithoutRef<'button'>) => {\n  return (\n    <S.Button {...rest}>\n      <TrashCanIcon width={12} height={12} aria-label='휴지통 아이콘' />\n    </S.Button>\n  );\n};\n\nexport default DeleteButton;\n\nconst S = {\n  Button: styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 2rem;\n    height: 2.4rem;\n    border-radius: 4px;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray5};\n    }\n  `,\n};\n","import { styled } from 'styled-components';\n\nexport const StoryContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  gap: 28px;\n`;\n\nexport const StoryItemContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 12px;\n`;\n\nexport const StoryItemContainerRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 12px;\n`;\n\nexport const StoryItemTitle = styled.h3`\n  color: ${({ theme }) => theme.color.gray9};\n  font-size: 12px;\n  font-weight: 400;\n  text-transform: uppercase;\n`;\n"],"names":[],"sourceRoot":""}