{"version":3,"file":"main.36bf1758.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;ACsCA;;AAEA;AAGA;;;;;;ACyGA;;;AA7CA;;;AAIA;;;AAKA;AAqCA;AAtGA;AACA;;;;;AAKA;AACA;;;;AAIA;;;AAIA;AACA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;;AAKA;AACA;AACA;AACA;AACA;;;AAGA;;;;AAIA;;;AAKA;AAwDA;AAhBA;;AADA;;;AAoBA;;;;;;AAQA;;;;AAMA;AACA;;;AA/CA;;;AAIA;;;AAKA;;;;ACtCA;AAvBA;;AA0BA;;;AAKA;;;;;;;;;ACvCA;AAEA;;;;;;;;AASA;;;;AAKA;;;;;AAKA;;AAGA;AACA;;;;;;;;;;;AAWA;AAEA;;;AAGA;AACA;;;;;;;;ACxGA;;;;;;;;;;;;;AAeA;;;;;;;;;AAWA;;;;;;;;;AAWA;;;;;;;;;AAWA","sources":["webpack://frontend/./src/styles/GlobalStyle.tsx","webpack://frontend/./src/pages/ErrorPage/ErrorPage.tsx","webpack://frontend/./src/components/@common/Button/Button.tsx","webpack://frontend/./src/components/@common/AnimationDiv/AnimationDiv.tsx","webpack://frontend/./src/components/@common/Toast/Toast.tsx","webpack://frontend/./src/styles/animation.ts"],"sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport { reset } from './reset';\nimport { MAX_WIDTH } from 'constants/style';\n\nconst GlobalStyle = createGlobalStyle`\n\t${reset}\n\n\thtml {\n\t\tfont-size: 10px;\n\t\t@media (max-width: ${MAX_WIDTH.tablet}) {\n\t\t\tfont-size: 9px;\n    }\n\t\t@media (max-width: ${MAX_WIDTH.mobileMedium}) {\n\t\t\tfont-size: 8.5px;\n    }\n\t}\n\n\t* {\n\t\tfont-family: 'Spoqa Han Sans Neo', 'sans-serif';\n\t}\n`;\n\nexport default GlobalStyle;\n","import Button from 'components/@common/Button/Button';\nimport { ErrorBoundaryFallbackProps } from 'components/ErrorBoundary/ErrorBoundary';\nimport { usePageNavigate } from 'hooks/usePageNavigate';\nimport { styled } from 'styled-components';\nimport { useTokenError } from './useTokenError';\nimport { useEffect, useLayoutEffect } from 'react';\n\nconst ErrorPage = ({ status, title, message, onResetError }: ErrorBoundaryFallbackProps) => {\n  const { goIntroducePage } = usePageNavigate();\n  const { handleTokenError } = useTokenError();\n\n  const handleGoIntroducePage = () => {\n    onResetError?.();\n    goIntroducePage();\n  };\n\n  useLayoutEffect(() => {\n    if (status === 401) {\n      onResetError?.();\n      handleTokenError();\n    }\n  }, []);\n\n  return (\n    <S.Container>\n      <S.Status>{status} Error</S.Status>\n      <S.ErrorMessageContainer>\n        <p>요청하신 페이지를 찾을 수 없습니다.</p>\n        <p>{message}</p>\n      </S.ErrorMessageContainer>\n      <Button variant='text' onClick={handleGoIntroducePage}>\n        돌아가기\n      </Button>\n    </S.Container>\n  );\n};\n\nexport default ErrorPage;\n\nconst S = {\n  Container: styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100vw;\n    height: 100vh;\n    gap: 1rem;\n  `,\n\n  Status: styled.h1`\n    font-size: 6rem;\n    color: ${({ theme }) => theme.color.gray10};\n  `,\n\n  ErrorMessageContainer: styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    font-size: 1.5rem;\n  `,\n};\n","// import { HomeIcon } from 'assets/icons';\nimport {\n  CSSProperties,\n  ComponentPropsWithRef,\n  ForwardedRef,\n  ReactElement,\n  forwardRef,\n} from 'react';\n\nimport { css, styled } from 'styled-components';\nimport { RuleSet } from 'styled-components/dist/types';\n\n// Type\nexport const Variant = ['primary', 'text', 'secondary'] as const;\nexport type Variant = (typeof Variant)[number];\n\nexport const Size = ['small', 'medium', 'large'] as const;\nexport type Size = (typeof Size)[number];\n\nexport const Align = ['left', 'center', 'right'] as const;\nexport type Align = (typeof Align)[number];\n\nexport type Props = {\n  variant?: Variant;\n  size?: Size;\n  block?: boolean;\n  align?: Align;\n  icon?: ReactElement;\n} & ComponentPropsWithRef<'button'>;\n\n// Component\nconst Button = (\n  {\n    children,\n    variant = 'primary',\n    size = 'medium',\n    block = false,\n    align = 'center',\n    icon,\n    ...rest\n  }: Props,\n  ref: ForwardedRef<HTMLButtonElement>,\n) => {\n  return (\n    <S.Button ref={ref} $variant={variant} $size={size} $block={block} $align={align} {...rest}>\n      <S.IconTextContainer>\n        {Boolean(icon) && <S.IconWrapper size={size}>{icon}</S.IconWrapper>}\n        <p>{children}</p>\n      </S.IconTextContainer>\n    </S.Button>\n  );\n};\n\nexport default forwardRef(Button);\n\n// Styled\nconst genVariantStyle = (variant: Required<Props>['variant']): RuleSet<object> => {\n  const styles: Record<typeof variant, ReturnType<typeof genVariantStyle>> = {\n    primary: css`\n      ${({ theme }) => css`\n        color: ${theme.color.gray10};\n        background-color: transparent;\n        outline: 1px solid transparent;\n\n        &:hover {\n          background-color: ${theme.color.primary};\n          color: ${theme.color.gray2};\n        }\n\n        &:focus {\n          box-shadow: 0 0 0 3px ${theme.color.primary};\n        }\n      `}\n    `,\n    text: css`\n      ${({ theme }) => css`\n        color: ${theme.color.gray10};\n        background-color: ${theme.color.gray1};\n        outline: 1px solid ${theme.color.gray1};\n\n        &:hover {\n          background-color: ${theme.color.gray4};\n        }\n\n        &:focus {\n          box-shadow: 0 0 0 3px ${theme.color.gray4};\n        }\n      `}\n    `,\n    /* TODO: secondary를 primary로 바꾸고, primary는 다른 이름으로 변경 */\n    secondary: css`\n      ${({ theme }) => css`\n        color: ${theme.color.gray1};\n        background-color: ${theme.color.primary};\n        outline: 1px solid ${theme.color.primary};\n\n        &:hover {\n          background-color: ${theme.color.primaryHover};\n        }\n\n        &:focus {\n          box-shadow: 0 0 0 3px ${theme.color.primary};\n        }\n      `}\n    `,\n  };\n  return styles[variant];\n};\n\nconst genSizeStyle = (size: Required<Props>['size']): RuleSet<object> => {\n  const styles: Record<typeof size, ReturnType<typeof genSizeStyle>> = {\n    small: css`\n      padding: 1rem 1.4rem;\n      font-size: 1.4rem;\n    `,\n    medium: css`\n      padding: 1.2rem 2rem;\n      font-size: 1.6rem;\n    `,\n    large: css`\n      padding: 1.4rem 2.4rem;\n      font-size: 1.8rem;\n    `,\n  };\n  return styles[size];\n};\n\nconst genIconStyle = (size: Required<Props>['size']): RuleSet<object> => {\n  const styles: Record<typeof size, ReturnType<typeof genIconStyle>> = {\n    small: css`\n      width: 2rem;\n      height: 2rem;\n    `,\n    medium: css`\n      width: 2.2rem;\n      height: 2.2rem;\n    `,\n    large: css`\n      width: 2.4rem;\n      height: 2.4rem;\n    `,\n  };\n  return styles[size];\n};\n\nconst genAlignStyle = (align: Required<Props>['align']): RuleSet<object> => {\n  const genAlign: Record<typeof align, CSSProperties['justifyContent']> = {\n    left: 'flex-start',\n    center: 'space-evenly',\n    right: 'flex-end',\n  };\n\n  return css`\n    justify-content: ${genAlign[align]};\n    align-items: center;\n  `;\n};\n\nconst S = {\n  Button: styled.button<{ $variant: Variant; $size: Size; $block: boolean; $align: Align }>`\n    ${({ $size = 'medium' }) => genSizeStyle($size)};\n    ${({ $variant = 'primary' }) => genVariantStyle($variant)};\n    ${({ $align = 'center' }) => genAlignStyle($align)};\n\n    display: flex;\n    width: ${({ $block }) => $block && '100%'};\n    border: none;\n    border-radius: 4px;\n\n    transition: all 0.2s ease-in-out;\n    cursor: pointer;\n  `,\n\n  IconTextContainer: styled.div<Props>`\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n  `,\n\n  IconWrapper: styled.div<Props>`\n    ${({ size = 'medium' }) => genIconStyle(size)};\n  `,\n};\n","import { useState, useLayoutEffect, HTMLAttributes, AnimationEventHandler } from 'react';\nimport { css, styled } from 'styled-components';\nimport * as animation from 'styles/animation';\n\ntype DisplayState = 'hidden' | 'appear' | 'disappear' | 'show';\ntype Animation = 'slide';\ntype DirectionTo = 'up' | 'down' | 'left' | 'right';\n\ntype Props = {\n  appearAnimation?: Animation;\n  disappearAnimation?: Animation;\n  animationDuration?: number;\n  directionTo?: DirectionTo;\n  isVisible: boolean;\n  children: React.ReactNode;\n  onAppear?: AnimationEventHandler<HTMLDivElement>;\n  onDisappear?: AnimationEventHandler<HTMLDivElement>;\n} & Omit<HTMLAttributes<HTMLDivElement>, 'onAnimationEnd'>;\n\n// hidden -> appear(애니메이션) -> show -> disappear(애니메이션) -> hidden 반복.\nconst AnimationDiv = ({\n  appearAnimation = 'slide',\n  disappearAnimation = 'slide',\n  animationDuration = 0.5,\n  directionTo = 'up',\n  isVisible,\n  children,\n  onAppear,\n  onDisappear,\n  ...rest\n}: Props) => {\n  const [displayState, setDisplayState] = useState<DisplayState>('hidden');\n\n  // 바깥에서 받아온 isVisible 상태로 appear할 건지 disappear 할 건지 결정.\n  // isVisible을 true로 받으면 appear, display가 show인 상태에서 isVisible을 false로 받으면 disappear.\n  useLayoutEffect(() => {\n    const isConditionAppear = isVisible;\n    const isConditionDisappear = displayState === 'show' && !isVisible;\n\n    if (!isConditionAppear && !isConditionDisappear) return;\n\n    setDisplayState(isVisible ? 'appear' : 'disappear');\n  }, [isVisible]);\n\n  // hidden 상태인데 isVisible도 false라면 아무것도 렌더링 되지 않아야함.\n  const isUnmounted = !isVisible && displayState === 'hidden';\n\n  if (isUnmounted) return <></>;\n\n  // appear와 disappear 애니메이션이 끝나고(onAnimationEnd) displayState를 업데이트.\n  const updateDisplayState: AnimationEventHandler<HTMLDivElement> = (e) => {\n    if (displayState === 'appear') {\n      setDisplayState('show');\n      onAppear?.(e);\n    }\n\n    if (displayState === 'disappear') {\n      setDisplayState('hidden');\n      onDisappear?.(e);\n    }\n  };\n\n  // 현재 실행할 애니메이션 결정.\n  const currentAnimation = isVisible ? appearAnimation : disappearAnimation;\n\n  return (\n    <S.Wrapper\n      $displayState={displayState}\n      $directionTo={directionTo}\n      $animation={currentAnimation}\n      $duration={animationDuration}\n      onAnimationEnd={updateDisplayState}\n      {...rest}\n    >\n      {children}\n    </S.Wrapper>\n  );\n};\n\nexport default AnimationDiv;\n\nconst genAnimationStyle = (\n  displayState: DisplayState,\n  animationType: Animation,\n  direction: DirectionTo,\n) => {\n  if (displayState === 'show' || displayState === 'hidden') return 'none';\n  if (animationType === 'slide') {\n    if (direction === 'down') return animation.slideToDown;\n    if (direction === 'up') return animation.slideToUp;\n    if (direction === 'right') return animation.slideToRight;\n    if (direction === 'left') return animation.slideToLeft;\n  }\n};\n\nconst S = {\n  Wrapper: styled.div<{\n    $displayState: DisplayState;\n    $directionTo: DirectionTo;\n    $animation: Animation;\n    $duration: number;\n  }>`\n    display: flex;\n    justify-content: center;\n    animation: ${({ $displayState, $animation, $directionTo, $duration }) => css`\n      ${genAnimationStyle($displayState, $animation, $directionTo)} ${$duration}s\n    `};\n    ${({ $displayState }) =>\n      $displayState === 'disappear'\n        ? css`\n            animation-direction: reverse;\n            animation-fill-mode: forwards;\n          `\n        : css`\n            animation-direction: normal;\n            animation-fill-mode: normal;\n          `}\n  `,\n};\n","import { AnimationEventHandler, MouseEventHandler, useState } from 'react';\nimport { styled } from 'styled-components';\nimport AnimationDiv from 'components/@common/AnimationDiv/AnimationDiv';\nimport { CloseIcon } from 'assets/icons';\nimport { linearToRight } from 'styles/animation';\n\nexport const ToastTheme = ['light', 'colored'] as const;\nexport type ToastTheme = (typeof ToastTheme)[number];\n\nexport const ToastType = ['plain', 'info', 'success', 'warning', 'error'] as const;\nexport type ToastType = (typeof ToastType)[number];\n\ntype HideToast = MouseEventHandler<HTMLButtonElement> & AnimationEventHandler<HTMLDivElement>;\n\nexport type Props = {\n  toastId: number;\n  theme?: ToastTheme;\n  type?: ToastType;\n  duration?: number;\n  hasCloseButton?: boolean;\n  hasProgressBar?: boolean;\n  message?: string;\n  onClose: (toastId: number) => void;\n};\n\nconst Toast = ({\n  toastId,\n  theme = 'light',\n  type = 'plain',\n  duration = 3000,\n  hasCloseButton = false,\n  hasProgressBar = false,\n  message,\n  onClose,\n}: Props) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  const hideToast: HideToast = () => setIsVisible(false);\n\n  const removeToast = (toastId: number) => {\n    onClose(toastId);\n  };\n\n  return (\n    <AnimationDiv isVisible={isVisible} onDisappear={() => removeToast(toastId)}>\n      <S.ToastContainer $toastTheme={theme} $type={type}>\n        <S.Content>\n          <span>{message}</span>\n          {hasCloseButton && (\n            <S.CloseButton onClick={hideToast}>\n              <CloseIcon width={16} height={16} />\n            </S.CloseButton>\n          )}\n        </S.Content>\n        <S.ProgressBar $type={type} $hasProgressBar={hasProgressBar}>\n          <S.PercentageBar $type={type} $duration={duration} onAnimationEnd={hideToast} />\n        </S.ProgressBar>\n      </S.ToastContainer>\n    </AnimationDiv>\n  );\n};\n\nexport default Toast;\n\nconst S = {\n  ToastContainer: styled.div<{\n    $toastTheme: ToastTheme;\n    $type: ToastType;\n  }>`\n    position: relative;\n    white-space: nowrap;\n    width: fit-content;\n    padding: 1.4rem 2.7rem;\n    background-color: ${({ theme, $type, $toastTheme }) =>\n      $toastTheme === 'light' ? theme.color.gray1 : theme.toastColor[$type].background};\n    border: 1px solid ${({ theme, $type }) => theme.toastColor[$type].border};\n    border-radius: 8px;\n    box-shadow:\n      #00000014 0px 12px 24px -4px,\n      rgba(0, 0, 0, 0.04) 0px 8px 16px -4px;\n    font-size: 1.4rem;\n    font-weight: 500;\n    overflow: hidden;\n  `,\n  Content: styled.div`\n    display: flex;\n    align-items: center;\n    gap: 1.2rem;\n  `,\n  CloseButton: styled.button`\n    padding: 0.4rem;\n    border-radius: 4px;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray5};\n    }\n  `,\n  ProgressBar: styled.div<{ $type: ToastType; $hasProgressBar: boolean }>`\n    visibility: ${({ $hasProgressBar }) => ($hasProgressBar ? 'visible' : 'hidden')};\n\n    content: '';\n\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    height: 5px;\n    width: 100%;\n\n    border-radius: 0 0 8px 8px;\n    background-color: ${({ theme }) => theme.color.gray5};\n  `,\n  PercentageBar: styled.div<{ $type: ToastType; $duration: number }>`\n    height: 100%;\n    border-radius: 0 0 0 8px;\n    background-color: ${({ theme, $type }) => theme.toastColor[$type].border};\n    animation: ${linearToRight} ${({ $duration }) => `${$duration}ms`} linear;\n  `,\n};\n","import { keyframes } from 'styled-components';\n\nconst rotation = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }   \n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst linearToRight = keyframes`\n  from {\n    width: 0%;\n  }\n\n  99% {\n    border-radius: 0 0 0 8px;\n  }\n\n  to {\n    width: 100%;\n    border-radius: 0 0 8px 8px;\n  }\n`;\n\nconst slideToLeft = keyframes`\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0%);\n    opacity: 1;\n  }\n`;\n\nconst slideToRight = keyframes`\n  from {\n    transform: translateX(-100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0%);\n    opacity: 1;\n  }\n`;\n\nconst slideToUp = keyframes`\n  from {\n    transform: translateY(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0%);\n    opacity: 1;\n  }\n`;\n\nconst slideToDown = keyframes`\n  from {\n    transform: translateY(-100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0%);\n    opacity: 1;\n  }\n`;\n\nexport { rotation, linearToRight, slideToDown, slideToLeft, slideToRight, slideToUp };\n"],"names":[],"sourceRoot":""}