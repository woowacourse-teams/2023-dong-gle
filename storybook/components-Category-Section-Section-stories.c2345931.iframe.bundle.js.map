{"version":3,"file":"components-Category-Section-Section-stories.c2345931.iframe.bundle.js","mappings":";;;;;;;;;AAgFA;;;AAKA;AACA;;AAIA;;;;;;;;;AASA;;;;;;ACXA;;AAIA;;;AAGA;;;;;;;;AAUA;;;;;;ACjDA;AAGA;;AC3DA;;;;;;;;;;;;ACiDA;;AAIA;;;;;;;;;;;AAWA;;;;AAIA;;;;;;;;;;;;ACtBA;;;AAfA;;;AAIA;;;AAMA;;;;;;;;;;;ACiFA;;AAEA;;;;AAMA;;;AAIA;;;;;AASA;;;AAzCA;;;AAIA;;;AAKA;AAiCA;AAxFA;AACA;;;;AAIA;AACA;;;AAIA;AACA;AACA;;;;;;AAMA;;;AAIA;AACA;;AAEA;;AAGA;AACA;;AAEA;;;;AAMA;;;AAsDA;;AAGA;AACA;AAEA;;;;;;AAMA;;;;;;;;;;;;;;AClDA;;;;;;;AASA;;;;;AAOA;AACA;;;;;AAOA;;;AAGA;;;;;;;AASA;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;;ACvEA;;;AAGA;;AAIA;;;AAGA;;;;;;;;;;AAYA;;;;;;;;;AAWA;;AAIA;AACA;;;;;;AAQA;;AAEA;;;;AAMA;;;;;AAOA;;;AAGA;AAGA;;;;;;;;;;;ACvIA","sources":["webpack://frontend/./src/components/Category/Header/Header.tsx","webpack://frontend/./src/components/Category/Item/Item.tsx","webpack://frontend/./src/components/Category/List/List.tsx","webpack://frontend/./src/utils/functionRegulator.ts","webpack://frontend/./src/components/@common/Accordion/AccordionTitle.tsx","webpack://frontend/./src/components/@common/Accordion/Accordion.tsx","webpack://frontend/./src/components/@common/Input/Input.tsx","webpack://frontend/./src/components/Category/Category/Category.tsx","webpack://frontend/./src/components/Category/WritingList/WritingList.tsx","webpack://frontend/./src/components/DeleteButton/DeleteButton.tsx"],"sourcesContent":["import { KeyboardEventHandler } from 'react';\nimport { styled } from 'styled-components';\nimport useUncontrolledInput from '../../../hooks/@common/useUncontrolledInput';\nimport { useCategoryMutation } from '../useCategoryMutation';\nimport Input from 'components/@common/Input/Input';\nimport { PlusIcon } from 'assets/icons';\nimport { useToast } from 'hooks/@common/useToast';\nimport { getErrorMessage } from 'utils/error';\nimport { validateCategoryName } from 'utils/validators';\n\ntype Props = {\n  onCategoryAdded: () => void;\n};\n\nconst Header = ({ onCategoryAdded }: Props) => {\n  const {\n    inputRef,\n    escapeInput: escapeAddCategory,\n    isInputOpen,\n    openInput,\n    resetInput,\n    isError,\n    setIsError,\n  } = useUncontrolledInput();\n  const { addCategory } = useCategoryMutation(onCategoryAdded);\n  const toast = useToast();\n\n  const requestAddCategory: KeyboardEventHandler<HTMLInputElement> = async (e) => {\n    try {\n      if (e.key !== 'Enter') return;\n\n      const categoryName = e.currentTarget.value.trim();\n\n      validateCategoryName(categoryName);\n\n      resetInput();\n      addCategory({ categoryName: categoryName });\n    } catch (error) {\n      setIsError(true);\n      toast.show({ type: 'error', message: getErrorMessage(error) });\n    }\n  };\n\n  return (\n    <S.Header>\n      <S.Title>카테고리</S.Title>\n      {isInputOpen ? (\n        <Input\n          type='text'\n          variant='underlined'\n          size='small'\n          placeholder='추가할 카테고리'\n          ref={inputRef}\n          isError={isError}\n          onBlur={resetInput}\n          onKeyDown={escapeAddCategory}\n          onKeyUp={requestAddCategory}\n          aria-label='카테고리 추가 입력 창'\n        />\n      ) : (\n        <S.Button onClick={openInput} aria-label='카테고리 추가 입력 창 열기'>\n          <PlusIcon width={12} height={12} />\n        </S.Button>\n      )}\n    </S.Header>\n  );\n};\n\nexport default Header;\n\nconst S = {\n  Header: styled.header`\n    position: sticky;\n    top: 0;\n    z-index: 1;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 3.6rem;\n    padding: 0.8rem;\n    background-color: ${({ theme }) => theme.color.spaceBackground};\n    font-size: 1.2rem;\n    font-weight: 400;\n  `,\n\n  Title: styled.h1`\n    color: ${({ theme }) => theme.color.gray8};\n    cursor: default;\n  `,\n\n  Button: styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 2rem;\n    height: 2rem;\n    border-radius: 4px;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray5};\n    }\n  `,\n};\n","import Accordion from 'components/@common/Accordion/Accordion';\nimport { DragEvent, useState } from 'react';\nimport Category from '../Category/Category';\nimport WritingList from '../WritingList/WritingList';\nimport styled, { css } from 'styled-components';\nimport { INDEX_POSITION } from 'constants/drag';\n\ntype Props = {\n  categoryId: number;\n  categoryName: string;\n  isDefaultCategory: boolean;\n  draggingIndexList: number[];\n  dragOverIndexList: number[];\n  onDragStart: (...ids: number[]) => (e: DragEvent) => void;\n  onDragEnter: (...ids: number[]) => (e: DragEvent) => void;\n  onDragEnd: (e: DragEvent) => void;\n  isWritingDragging: boolean;\n};\n\nconst Item = ({\n  categoryId,\n  categoryName,\n  isDefaultCategory,\n  draggingIndexList,\n  dragOverIndexList,\n  onDragStart,\n  onDragEnter,\n  onDragEnd,\n  isWritingDragging,\n}: Props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const decideDraggingTarget = () => {\n    const isCategoryDragOverTarget =\n      dragOverIndexList.length === 1 &&\n      categoryId === dragOverIndexList[INDEX_POSITION.CATEGORY_ID];\n    const isWritingDragOverTarget =\n      isCategoryDragOverTarget && dragOverIndexList.length !== draggingIndexList.length;\n\n    if (isWritingDragOverTarget) return 'writing';\n    if (isCategoryDragOverTarget) return 'category';\n    return 'none';\n  };\n\n  return (\n    <S.DragContainer\n      draggable={!isDefaultCategory}\n      $draggingTarget={decideDraggingTarget()}\n      onDragStart={onDragStart(categoryId)}\n      onDragEnter={onDragEnter(categoryId)}\n      onDragEnd={onDragEnd}\n    >\n      <Accordion.Item key={categoryId}>\n        <Accordion.Title\n          onIconClick={() => setIsOpen((prev) => !prev)}\n          aria-label={`${categoryName} 카테고리 왼쪽 사이드바에서 열기`}\n        >\n          <Category\n            categoryId={categoryId}\n            categoryName={categoryName}\n            isDefaultCategory={isDefaultCategory}\n          />\n        </Accordion.Title>\n        <Accordion.Panel>\n          <WritingList\n            categoryId={categoryId}\n            isOpen={isOpen}\n            dragOverIndexList={dragOverIndexList}\n            onDragStart={onDragStart}\n            onDragEnter={onDragEnter}\n            onDragEnd={onDragEnd}\n            isWritingDragging={isWritingDragging}\n          />\n        </Accordion.Panel>\n      </Accordion.Item>\n    </S.DragContainer>\n  );\n};\n\nexport default Item;\n\nconst S = {\n  DragContainer: styled.div<{\n    $draggingTarget: 'category' | 'writing' | 'none';\n  }>`\n    position: relative;\n    border-top: 0.4rem solid transparent;\n\n    ${({ $draggingTarget }) =>\n      $draggingTarget === 'category' &&\n      css`\n        border-radius: 0;\n        border-top: 0.4rem solid ${({ theme }) => theme.color.dragArea};\n      `}\n\n    ${({ $draggingTarget }) =>\n      $draggingTarget === 'writing' &&\n      css`\n        &::before {\n          content: '';\n          pointer-events: none;\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          border-radius: 4px;\n          background-color: ${({ theme }) => theme.color.dragArea};\n        }\n      `}\n  `,\n};\n","import Accordion from 'components/@common/Accordion/Accordion';\nimport { useCategories } from './useCategories';\nimport Item from '../Item/Item';\nimport { useDragAndDrop } from 'components/Category/useDragAndDrop';\nimport styled, { css } from 'styled-components';\nimport { INDEX_POSITION, LAST_DRAG_SECTION_ID } from 'constants/drag';\n\nconst List = () => {\n  const { categories } = useCategories();\n  const {\n    draggingIndexList,\n    dragOverIndexList,\n    handleDragEnd,\n    handleDragEnter,\n    handleDragStart,\n    isCategoryDragging,\n    isWritingDragging,\n  } = useDragAndDrop();\n\n  if (!categories) return null;\n\n  return (\n    <Accordion>\n      {categories.map((category, index) => {\n        return (\n          <Item\n            key={category.id}\n            categoryId={category.id}\n            categoryName={category.categoryName}\n            isDefaultCategory={Boolean(index === 0)}\n            draggingIndexList={draggingIndexList}\n            dragOverIndexList={dragOverIndexList}\n            onDragStart={handleDragStart}\n            onDragEnter={handleDragEnter}\n            onDragEnd={handleDragEnd}\n            isWritingDragging={isWritingDragging}\n          />\n        );\n      })}\n      <S.DragLastSection\n        onDragEnter={handleDragEnter(LAST_DRAG_SECTION_ID)}\n        $isDragOverTarget={\n          isCategoryDragging &&\n          dragOverIndexList[INDEX_POSITION.CATEGORY_ID] === LAST_DRAG_SECTION_ID\n        }\n      />\n    </Accordion>\n  );\n};\n\nexport default List;\n\nconst S = {\n  DragLastSection: styled.div<{ $isDragOverTarget: boolean }>`\n    height: 0.4rem;\n    background-color: transparent;\n    ${({ $isDragOverTarget }) =>\n      $isDragOverTarget &&\n      css`\n        background-color: ${({ theme }) => theme.color.dragArea};\n      `};\n  `,\n};\n","export const throttle = <T extends (...args: any[]) => any>(func: T, delay: number) => {\n  let timer: ReturnType<typeof setTimeout> | null;\n\n  return (...args: Parameters<T>) => {\n    if (timer) return;\n\n    timer = setTimeout(() => {\n      timer = null;\n      func(...args);\n    }, delay);\n  };\n};\n","import { ComponentPropsWithoutRef, MouseEvent } from 'react';\nimport { styled } from 'styled-components';\nimport { ArrowRightIcon } from 'assets/icons';\n\ntype Props = {\n  isOpen: boolean;\n  onToggleIconClick: () => void;\n  onTitleClick?: () => void;\n  onIconClick?: () => void;\n} & ComponentPropsWithoutRef<'div'>;\n\nconst AccordionTitle = ({\n  isOpen = false,\n  onToggleIconClick,\n  onIconClick,\n  onTitleClick,\n  children,\n  ...rest\n}: Partial<Props>) => {\n  const togglePanel = (e: MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n\n    if (onToggleIconClick) onToggleIconClick();\n\n    if (onIconClick) onIconClick();\n  };\n\n  return (\n    <S.Container onClick={onTitleClick}>\n      <S.IconButton $isOpen={isOpen} onClick={togglePanel} aria-label={rest['aria-label']}>\n        <ArrowRightIcon width={8} height={14} />\n      </S.IconButton>\n      {children}\n    </S.Container>\n  );\n};\n\nexport default AccordionTitle;\n\nconst S = {\n  Container: styled.div`\n    display: flex;\n    gap: 0.8rem;\n    align-items: center;\n    width: 100%;\n    padding: 0 0.4rem;\n    border-radius: 4px;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray3};\n    }\n  `,\n\n  IconButton: styled.button<Record<'$isOpen', boolean>>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 1.8rem;\n    height: 2.2rem;\n    padding: 0.4rem;\n    border-radius: 4px;\n    flex-shrink: 0;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray5};\n    }\n\n    & > svg {\n      rotate: ${({ $isOpen }) => $isOpen && '90deg'};\n      transition: rotate 0.2s;\n    }\n  `,\n};\n","import { ComponentPropsWithoutRef } from 'react';\nimport { RuleSet, css, styled } from 'styled-components';\nimport { Size } from 'types/components/common';\nimport AccordionItem from './AccordionItem';\nimport AccordionTitle from './AccordionTitle';\nimport AccordionPanel from './AccordionPanel';\n\ntype Props = {\n  size: Size;\n} & ComponentPropsWithoutRef<'ul'>;\n\nconst Accordion = ({ size = 'medium', children, ...rest }: Partial<Props>) => {\n  return (\n    <S.List size={size} {...rest}>\n      {children}\n    </S.List>\n  );\n};\n\nexport default Accordion;\n\nAccordion.Item = AccordionItem;\nAccordion.Title = AccordionTitle;\nAccordion.Panel = AccordionPanel;\n\nconst genAccordionSize = (size: Required<Props>['size']): RuleSet<object> => {\n  const styles: Record<typeof size, ReturnType<typeof genAccordionSize>> = {\n    small: css`\n      width: 12rem;\n      font-size: 1.2rem;\n    `,\n    medium: css`\n      width: 24rem;\n      font-size: 1.6rem;\n    `,\n    large: css`\n      width: 36rem;\n      font-size: 2rem;\n    `,\n  };\n\n  return styles[size];\n};\n\nconst S = {\n  List: styled.ul<Pick<Props, 'size'>>`\n    ${({ size = 'medium' }) => genAccordionSize(size)};\n\n    display: flex;\n    flex-direction: column;\n    gap: 0.4rem;\n    width: 100%;\n  `,\n};\n","import type { ComponentPropsWithRef, ForwardedRef, ReactElement } from 'react';\nimport { forwardRef, useId } from 'react';\nimport { RuleSet, css, styled } from 'styled-components';\nimport { Size } from 'types/components/common';\n\nexport const InputVariant = ['outline', 'filled', 'unstyled', 'underlined'] as const;\nexport type InputVariant = (typeof InputVariant)[number];\n\ntype Props = {\n  size: Size;\n  labelText: string;\n  supportingText: string;\n  variant: InputVariant;\n  isError: boolean;\n} & Omit<ComponentPropsWithRef<'input'>, 'size'>;\n\nconst Input = (\n  {\n    size = 'medium',\n    labelText,\n    supportingText,\n    variant = 'outline',\n    isError = false,\n    ...rest\n  }: Partial<Props>,\n  ref: ForwardedRef<HTMLInputElement>,\n) => {\n  const inputId = useId();\n  return (\n    <S.InputContainer>\n      {labelText && (\n        <S.Label htmlFor={inputId} $required={rest.required} $variant={variant}>\n          {labelText}\n        </S.Label>\n      )}\n      <S.Input\n        id={inputId}\n        ref={ref}\n        $size={size}\n        $variant={variant}\n        $isError={isError}\n        {...rest}\n      />\n      {supportingText && <S.SupportingText $isError={isError}>{supportingText}</S.SupportingText>}\n    </S.InputContainer>\n  );\n};\n\nexport default forwardRef(Input);\n\nconst genVariantStyle = (\n  variant: Required<Props>['variant'],\n  isError: Required<Props>['isError'],\n): RuleSet<object> => {\n  const styles: Record<typeof variant, ReturnType<typeof genVariantStyle>> = {\n    outline: css`\n      ${({ theme }) => css`\n        border: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n        outline: 1px solid transparent;\n\n        &:focus {\n          border: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n          outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray8};\n        }\n      `}\n    `,\n    filled: css`\n      ${({ theme }) => css`\n        background-color: ${isError ? theme.color.red1 : theme.color.gray4};\n        border: 1px solid transparent;\n        outline: 1px solid transparent;\n\n        &:focus {\n          background-color: transparent;\n          outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray8};\n        }\n      `}\n    `,\n    unstyled: css`\n      ${({ theme }) => css`\n        border: 1px solid transparent;\n        outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray1};\n      `}\n    `,\n    underlined: css`\n      ${({ theme }) => css`\n        border: 1px solid transparent;\n        border-bottom: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n        border-radius: 0;\n        outline: 1px solid transparent;\n      `}\n    `,\n  };\n  return styles[variant];\n};\n\nconst genSizeStyle = (size: Required<Props>['size']): RuleSet<object> => {\n  const styles: Record<typeof size, ReturnType<typeof genSizeStyle>> = {\n    small: css`\n      padding: 0.6rem 0.6rem;\n      font-size: 1.3rem;\n    `,\n    medium: css`\n      padding: 0.8rem 1rem;\n      font-size: 1.4rem;\n    `,\n    large: css`\n      padding: 1rem 1.2rem;\n      font-size: 1.5rem;\n    `,\n  };\n  return styles[size];\n};\n\nconst S = {\n  InputContainer: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 0.6rem;\n    font-size: 1.3rem;\n  `,\n\n  Label: styled.label<{ $required: boolean | undefined; $variant: InputVariant }>`\n    font-weight: 500;\n    ${({ $required, theme }) =>\n      $required &&\n      css`\n        &::after {\n          content: '*';\n          margin-left: 0.2rem;\n          color: ${theme.color.red6};\n        }\n      `};\n  `,\n  Input: styled.input<{\n    $size: Size;\n    $variant: InputVariant;\n    $isError: boolean;\n  }>`\n    border: none;\n    border-radius: 4px;\n    background-color: transparent;\n\n    ${({ $size }) => genSizeStyle($size)};\n    ${({ $variant, $isError }) => genVariantStyle($variant, $isError)};\n\n    &::placeholder {\n      color: ${({ theme }) => theme.color.gray6};\n    }\n  `,\n  SupportingText: styled.p<{ $isError: boolean | undefined }>`\n    color: ${({ $isError, theme }) => ($isError ? theme.color.red6 : theme.color.gray7)};\n  `,\n  Underline: styled.div`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    height: 2px;\n    width: 100%;\n    background-color: ${({ theme }) => theme.color.primary};\n    transform: scaleX(0);\n    transition: all 0.3s ease;\n  `,\n};\n","import { PencilIcon } from 'assets/icons';\nimport { usePageNavigate } from 'hooks/usePageNavigate';\nimport { KeyboardEventHandler } from 'react';\nimport { styled } from 'styled-components';\nimport useUncontrolledInput from '../../../hooks/@common/useUncontrolledInput';\nimport { useCategoryMutation } from '../useCategoryMutation';\nimport Input from 'components/@common/Input/Input';\nimport DeleteButton from 'components/DeleteButton/DeleteButton';\nimport { useToast } from 'hooks/@common/useToast';\nimport { getErrorMessage } from 'utils/error';\nimport { validateCategoryName } from 'utils/validators';\n\ntype Props = {\n  categoryId: number;\n  categoryName: string;\n  isDefaultCategory: boolean;\n};\n\nconst Category = ({ categoryId, categoryName, isDefaultCategory }: Props) => {\n  const {\n    inputRef,\n    escapeInput: escapeRename,\n    isInputOpen,\n    openInput,\n    resetInput,\n    isError,\n    setIsError,\n  } = useUncontrolledInput();\n  const { updateCategoryTitle, deleteCategory } = useCategoryMutation();\n  const { goWritingTablePage } = usePageNavigate();\n  const toast = useToast();\n\n  const requestChangedName: KeyboardEventHandler<HTMLInputElement> = (e) => {\n    try {\n      if (e.key !== 'Enter') return;\n\n      const categoryName = e.currentTarget.value.trim();\n\n      validateCategoryName(categoryName);\n\n      updateCategoryTitle({\n        categoryId,\n        body: {\n          categoryName,\n        },\n      });\n\n      resetInput();\n    } catch (error) {\n      setIsError(true);\n      toast.show({ type: 'error', message: getErrorMessage(error) });\n    }\n  };\n\n  return (\n    <S.Container $isDefaultCategory={isDefaultCategory}>\n      {isInputOpen ? (\n        <Input\n          type='text'\n          variant='underlined'\n          size='small'\n          placeholder='변경할 카테고리 이름'\n          defaultValue={categoryName}\n          ref={inputRef}\n          isError={isError}\n          onBlur={resetInput}\n          onKeyDown={escapeRename}\n          onKeyUp={requestChangedName}\n          aria-label={`${categoryName} 카테고리 이름 수정 입력 창`}\n        />\n      ) : (\n        <>\n          <S.CategoryButton\n            onClick={() => goWritingTablePage(categoryId)}\n            aria-label={`${categoryName} 카테고리 메인 화면에 열기`}\n          >\n            <S.Text>{categoryName}</S.Text>\n          </S.CategoryButton>\n          {!isDefaultCategory && (\n            <S.IconContainer>\n              <S.Button aria-label={`${categoryName} 카테고리 이름 수정`} onClick={openInput}>\n                <PencilIcon width={12} height={12} />\n              </S.Button>\n              <DeleteButton\n                aria-label={`${categoryName} 카테고리 삭제`}\n                onClick={() => deleteCategory(categoryId)}\n              />\n            </S.IconContainer>\n          )}\n        </>\n      )}\n    </S.Container>\n  );\n};\n\nexport default Category;\n\nconst S = {\n  Container: styled.div<{ $isDefaultCategory: boolean }>`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 90%;\n    height: 3.6rem;\n    border-radius: 4px;\n    font-size: 1.4rem;\n\n    &:hover {\n      & > button {\n        padding-right: ${({ $isDefaultCategory }) => !$isDefaultCategory && '5.2rem'};\n      }\n\n      div {\n        opacity: 0.99;\n      }\n    }\n  `,\n\n  CategoryButton: styled.button`\n    flex: 1;\n    min-width: 0;\n    height: 100%;\n    text-align: left;\n  `,\n\n  Text: styled.p`\n    color: ${({ theme }) => theme.color.gray10};\n    font-weight: 600;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  `,\n\n  Input: styled.input`\n    border: none;\n    outline: none;\n    color: ${({ theme }) => theme.color.gray10};\n    font-size: 1.3rem;\n    font-weight: 600;\n\n    &::placeholder {\n      font-weight: 300;\n    }\n  `,\n\n  IconContainer: styled.div`\n    display: flex;\n    position: absolute;\n    right: 0;\n    margin-right: 0.8rem;\n    opacity: 0;\n  `,\n\n  Button: styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 2rem;\n    height: 2.4rem;\n    padding: 0.4rem;\n    border-radius: 4px;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray5};\n    }\n  `,\n};\n","import { WritingIcon } from 'assets/icons';\nimport { usePageNavigate } from 'hooks/usePageNavigate';\nimport { styled, css } from 'styled-components';\nimport { useWritings } from './useWritings';\nimport DeleteButton from 'components/DeleteButton/DeleteButton';\nimport { useDeleteWritings } from './useDeleteWritings';\nimport { useGlobalStateValue } from '@yogjin/react-global-state';\nimport { activeWritingInfoState } from 'globalState';\nimport { DragEvent } from 'react';\nimport { INDEX_POSITION, LAST_DRAG_SECTION_ID } from 'constants/drag';\n\ntype Props = {\n  categoryId: number;\n  isOpen: boolean;\n  dragOverIndexList: number[];\n  onDragStart: (...ids: number[]) => (e: DragEvent) => void;\n  onDragEnter: (...ids: number[]) => (e: DragEvent) => void;\n  onDragEnd: (e: DragEvent) => void;\n  isWritingDragging: boolean;\n};\n\nconst WritingList = ({\n  categoryId,\n  isOpen,\n  dragOverIndexList,\n  onDragStart,\n  onDragEnter,\n  onDragEnd,\n  isWritingDragging,\n}: Props) => {\n  const { goWritingPage } = usePageNavigate();\n  const { writings } = useWritings(categoryId, isOpen);\n  const activeWritingInfo = useGlobalStateValue(activeWritingInfoState);\n  const writingId = activeWritingInfo?.id;\n  const deleteWritings = useDeleteWritings();\n\n  const isWritingDragOverTarget = (categoryId: number, writingId: number) =>\n    isWritingDragging &&\n    categoryId === dragOverIndexList[INDEX_POSITION.CATEGORY_ID] &&\n    writingId === dragOverIndexList[INDEX_POSITION.WRITING_ID];\n\n  if (!writings || writings?.length === 0) return <S.NoWritingsText>빈 카테고리</S.NoWritingsText>;\n\n  return (\n    <ul>\n      {writings.map((writing) => (\n        <S.Item\n          key={writing.id}\n          $isClicked={writingId === writing.id}\n          $isDragOverTarget={isWritingDragOverTarget(categoryId, writing.id)}\n          draggable={true}\n          onDragStart={onDragStart(categoryId, writing.id)}\n          onDragEnter={onDragEnter(categoryId, writing.id)}\n          onDragEnd={onDragEnd}\n        >\n          <S.Button\n            aria-label={`${writing.title}글 메인화면에 열기`}\n            onClick={() =>\n              goWritingPage({ categoryId, writingId: writing.id, isDeletedWriting: false })\n            }\n          >\n            <S.IconWrapper>\n              <WritingIcon width={14} height={14} />\n            </S.IconWrapper>\n            <S.Text>{writing.title}</S.Text>\n          </S.Button>\n          <S.DeleteButtonWrapper>\n            <DeleteButton\n              onClick={() => deleteWritings([writing.id])}\n              aria-label={`${writing.title}글 삭제`}\n            />\n          </S.DeleteButtonWrapper>\n        </S.Item>\n      ))}\n      <S.DragLastSection\n        onDragEnter={onDragEnter(categoryId, LAST_DRAG_SECTION_ID)}\n        $isDragOverTarget={isWritingDragOverTarget(categoryId, LAST_DRAG_SECTION_ID)}\n      />\n    </ul>\n  );\n};\n\nexport default WritingList;\n\nconst S = {\n  Item: styled.li<{ $isClicked: boolean; $isDragOverTarget: boolean }>`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    height: 3.6rem;\n    border-radius: 4px;\n    background-color: ${({ theme, $isClicked }) => $isClicked && theme.color.gray4};\n    border-top: 0.4rem solid transparent;\n\n    ${({ $isDragOverTarget }) =>\n      $isDragOverTarget &&\n      css`\n        border-radius: 0;\n        border-top: 0.4rem solid ${({ theme }) => theme.color.dragArea};\n      `};\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray3};\n\n      & > button {\n        padding-right: 2.8rem;\n      }\n\n      div {\n        opacity: 0.99;\n      }\n    }\n  `,\n\n  Button: styled.button`\n    display: flex;\n    align-items: center;\n    gap: 0.4rem;\n    width: 100%;\n    min-width: 0;\n    height: 100%;\n    padding: 0.4rem 0 0.4rem 3.2rem;\n    border-radius: 4px;\n  `,\n\n  IconWrapper: styled.div`\n    flex-shrink: 0;\n  `,\n\n  Text: styled.p`\n    color: ${({ theme }) => theme.color.gray9};\n    font-size: 1.4rem;\n    font-weight: 400;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  `,\n\n  NoWritingsText: styled.p`\n    padding: 0.4rem 0 0.4rem 3.2rem;\n    color: ${({ theme }) => theme.color.gray6};\n    font-size: 1.4rem;\n    font-weight: 500;\n    cursor: default;\n  `,\n\n  DeleteButtonWrapper: styled.div`\n    position: absolute;\n    right: 0;\n    margin-right: 0.8rem;\n    opacity: 0;\n  `,\n\n  DragLastSection: styled.div<{ $isDragOverTarget: boolean }>`\n    height: 0.4rem;\n    background-color: transparent;\n    ${({ $isDragOverTarget }) =>\n      $isDragOverTarget &&\n      css`\n        background-color: ${({ theme }) => theme.color.dragArea};\n      `};\n  `,\n};\n","import { TrashCanIcon } from 'assets/icons';\nimport { ComponentPropsWithoutRef } from 'react';\nimport { styled } from 'styled-components';\n\nconst DeleteButton = ({ ...rest }: ComponentPropsWithoutRef<'button'>) => {\n  return (\n    <S.Button {...rest}>\n      <TrashCanIcon width={12} height={12} aria-label='휴지통 아이콘' />\n    </S.Button>\n  );\n};\n\nexport default DeleteButton;\n\nconst S = {\n  Button: styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 2rem;\n    height: 2.4rem;\n    border-radius: 4px;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray5};\n    }\n  `,\n};\n"],"names":[],"sourceRoot":""}