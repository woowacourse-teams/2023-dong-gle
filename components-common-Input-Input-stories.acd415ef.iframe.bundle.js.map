{"version":3,"file":"components-common-Input-Input-stories.acd415ef.iframe.bundle.js","mappings":";;;;;AA0HA;;AAEA;;;;AAMA;;;AAIA;;;;;AASA;;;AAzCA;;;AAIA;;;AAKA;AAiCA;AAxFA;AACA;;;;AAIA;AACA;;;AAIA;AACA;AACA;;;;;;AAMA;;;AAIA;AACA;;AAEA;;AAGA;AACA;;AAEA;;;;AAMA;;;AAsDA;;AAGA;AACA;AAEA;;;;;;AAMA","sources":["webpack://frontend/./src/components/@common/Input/Input.tsx"],"sourcesContent":["import type { ComponentPropsWithRef, ForwardedRef, ReactElement } from 'react';\nimport { forwardRef, useId } from 'react';\nimport { RuleSet, css, styled } from 'styled-components';\nimport { Size } from 'types/components/common';\n\nexport const InputVariant = ['outline', 'filled', 'unstyled', 'underlined'] as const;\nexport type InputVariant = (typeof InputVariant)[number];\n\ntype Props = {\n  size: Size;\n  labelText: string;\n  supportingText: string;\n  variant: InputVariant;\n  isError: boolean;\n} & Omit<ComponentPropsWithRef<'input'>, 'size'>;\n\nconst Input = (\n  {\n    size = 'medium',\n    labelText,\n    supportingText,\n    variant = 'outline',\n    isError = false,\n    ...rest\n  }: Partial<Props>,\n  ref: ForwardedRef<HTMLInputElement>,\n) => {\n  const inputId = useId();\n  return (\n    <S.InputContainer>\n      {labelText && (\n        <S.Label htmlFor={inputId} $required={rest.required} $variant={variant}>\n          {labelText}\n        </S.Label>\n      )}\n      <S.Input\n        id={inputId}\n        ref={ref}\n        $size={size}\n        $variant={variant}\n        $isError={isError}\n        {...rest}\n      />\n      {supportingText && <S.SupportingText $isError={isError}>{supportingText}</S.SupportingText>}\n    </S.InputContainer>\n  );\n};\n\nexport default forwardRef(Input);\n\nconst genVariantStyle = (\n  variant: Required<Props>['variant'],\n  isError: Required<Props>['isError'],\n): RuleSet<object> => {\n  const styles: Record<typeof variant, ReturnType<typeof genVariantStyle>> = {\n    outline: css`\n      ${({ theme }) => css`\n        border: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n        outline: 1px solid transparent;\n\n        &:focus {\n          border: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n          outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray8};\n        }\n      `}\n    `,\n    filled: css`\n      ${({ theme }) => css`\n        background-color: ${isError ? theme.color.red1 : theme.color.gray4};\n        border: 1px solid transparent;\n        outline: 1px solid transparent;\n\n        &:focus {\n          background-color: transparent;\n          outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray8};\n        }\n      `}\n    `,\n    unstyled: css`\n      ${({ theme }) => css`\n        border: 1px solid transparent;\n        outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray1};\n      `}\n    `,\n    underlined: css`\n      ${({ theme }) => css`\n        border: 1px solid transparent;\n        border-bottom: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n        border-radius: 0;\n        outline: 1px solid transparent;\n      `}\n    `,\n  };\n  return styles[variant];\n};\n\nconst genSizeStyle = (size: Required<Props>['size']): RuleSet<object> => {\n  const styles: Record<typeof size, ReturnType<typeof genSizeStyle>> = {\n    small: css`\n      padding: 0.6rem 0.6rem;\n      font-size: 1.3rem;\n    `,\n    medium: css`\n      padding: 0.8rem 1rem;\n      font-size: 1.4rem;\n    `,\n    large: css`\n      padding: 1rem 1.2rem;\n      font-size: 1.5rem;\n    `,\n  };\n  return styles[size];\n};\n\nconst S = {\n  InputContainer: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 0.6rem;\n    font-size: 1.3rem;\n  `,\n\n  Label: styled.label<{ $required: boolean | undefined; $variant: InputVariant }>`\n    font-weight: 500;\n    ${({ $required, theme }) =>\n      $required &&\n      css`\n        &::after {\n          content: '*';\n          margin-left: 0.2rem;\n          color: ${theme.color.red6};\n        }\n      `};\n  `,\n  Input: styled.input<{\n    $size: Size;\n    $variant: InputVariant;\n    $isError: boolean;\n  }>`\n    border: none;\n    border-radius: 4px;\n    background-color: transparent;\n\n    ${({ $size }) => genSizeStyle($size)};\n    ${({ $variant, $isError }) => genVariantStyle($variant, $isError)};\n\n    &::placeholder {\n      color: ${({ theme }) => theme.color.gray6};\n    }\n  `,\n  SupportingText: styled.p<{ $isError: boolean | undefined }>`\n    color: ${({ $isError, theme }) => ($isError ? theme.color.red6 : theme.color.gray7)};\n  `,\n  Underline: styled.div`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    height: 2px;\n    width: 100%;\n    background-color: ${({ theme }) => theme.color.primary};\n    transform: scaleX(0);\n    transition: all 0.3s ease;\n  `,\n};\n"],"names":[],"sourceRoot":""}