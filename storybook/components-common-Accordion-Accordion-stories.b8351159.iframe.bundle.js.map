{"version":3,"file":"components-common-Accordion-Accordion-stories.b8351159.iframe.bundle.js","mappings":";;;;;;;;;AAiDA;;AAIA;;;;;;;;;;;AAWA;;;;AAIA;;;;;;;;;;;;ACtBA;;;AAfA;;;AAIA;;;AAMA;;;;;;;;;;;AChCA;;;;;AAaA;;;;AAAA;AACA","sources":["webpack://frontend/./src/components/@common/Accordion/AccordionTitle.tsx","webpack://frontend/./src/components/@common/Accordion/Accordion.tsx","webpack://frontend/./src/styles/storybook.ts"],"sourcesContent":["import { ComponentPropsWithoutRef, MouseEvent } from 'react';\nimport { styled } from 'styled-components';\nimport { ArrowRightIcon } from 'assets/icons';\n\ntype Props = {\n  isOpen: boolean;\n  onToggleIconClick: () => void;\n  onTitleClick?: () => void;\n  onIconClick?: () => void;\n} & ComponentPropsWithoutRef<'div'>;\n\nconst AccordionTitle = ({\n  isOpen = false,\n  onToggleIconClick,\n  onIconClick,\n  onTitleClick,\n  children,\n  ...rest\n}: Partial<Props>) => {\n  const togglePanel = (e: MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n\n    if (onToggleIconClick) onToggleIconClick();\n\n    if (onIconClick) onIconClick();\n  };\n\n  return (\n    <S.Container onClick={onTitleClick}>\n      <S.IconButton $isOpen={isOpen} onClick={togglePanel} aria-label={rest['aria-label']}>\n        <ArrowRightIcon width={8} height={14} />\n      </S.IconButton>\n      {children}\n    </S.Container>\n  );\n};\n\nexport default AccordionTitle;\n\nconst S = {\n  Container: styled.div`\n    display: flex;\n    gap: 0.8rem;\n    align-items: center;\n    width: 100%;\n    padding: 0 0.4rem;\n    border-radius: 4px;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray3};\n    }\n  `,\n\n  IconButton: styled.button<Record<'$isOpen', boolean>>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 1.8rem;\n    height: 2.2rem;\n    padding: 0.4rem;\n    border-radius: 4px;\n    flex-shrink: 0;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray5};\n    }\n\n    & > svg {\n      rotate: ${({ $isOpen }) => $isOpen && '90deg'};\n      transition: rotate 0.2s;\n    }\n  `,\n};\n","import { ComponentPropsWithoutRef } from 'react';\nimport { RuleSet, css, styled } from 'styled-components';\nimport { Size } from 'types/components/common';\nimport AccordionItem from './AccordionItem';\nimport AccordionTitle from './AccordionTitle';\nimport AccordionPanel from './AccordionPanel';\n\ntype Props = {\n  size: Size;\n} & ComponentPropsWithoutRef<'ul'>;\n\nconst Accordion = ({ size = 'medium', children, ...rest }: Partial<Props>) => {\n  return (\n    <S.List size={size} {...rest}>\n      {children}\n    </S.List>\n  );\n};\n\nexport default Accordion;\n\nAccordion.Item = AccordionItem;\nAccordion.Title = AccordionTitle;\nAccordion.Panel = AccordionPanel;\n\nconst genAccordionSize = (size: Required<Props>['size']): RuleSet<object> => {\n  const styles: Record<typeof size, ReturnType<typeof genAccordionSize>> = {\n    small: css`\n      width: 12rem;\n      font-size: 1.2rem;\n    `,\n    medium: css`\n      width: 24rem;\n      font-size: 1.6rem;\n    `,\n    large: css`\n      width: 36rem;\n      font-size: 2rem;\n    `,\n  };\n\n  return styles[size];\n};\n\nconst S = {\n  List: styled.ul<Pick<Props, 'size'>>`\n    ${({ size = 'medium' }) => genAccordionSize(size)};\n\n    display: flex;\n    flex-direction: column;\n    gap: 0.4rem;\n    width: 100%;\n  `,\n};\n","import { styled } from 'styled-components';\n\nexport const StoryContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  gap: 28px;\n`;\n\nexport const StoryItemContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 12px;\n`;\n\nexport const StoryItemContainerRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 12px;\n`;\n\nexport const StoryItemTitle = styled.h3`\n  color: ${({ theme }) => theme.color.gray9};\n  font-size: 12px;\n  font-weight: 400;\n  text-transform: uppercase;\n`;\n"],"names":[],"sourceRoot":""}