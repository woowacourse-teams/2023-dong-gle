{"version":3,"file":"components-common-Modal-Modal-stories.81cd748f.iframe.bundle.js","mappings":";;;AAiFA;;;AAGA;AAEA;;;;;;;;;;;AAWA;;AAGA;;;;;;AAMA","sources":["webpack://frontend/./src/components/@common/Modal/Modal.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { ComponentPropsWithoutRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { styled } from 'styled-components';\nimport { CloseIcon } from 'assets/icons';\n\ntype Props = {\n  isOpen: boolean;\n  canBackdropClose?: boolean;\n  canEscKeyClose?: boolean;\n  hasCloseButton?: boolean;\n  closeModal: () => void;\n} & ComponentPropsWithoutRef<'dialog'>;\n\nconst Modal = ({\n  isOpen = true,\n  canBackdropClose = true,\n  canEscKeyClose = true,\n  hasCloseButton = true,\n  closeModal,\n  children,\n  ...rest\n}: Props) => {\n  const myRef = useRef<HTMLDialogElement>(null);\n\n  const onKeyDownEscape = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key !== 'Escape') return;\n      closeModal();\n    },\n    [closeModal],\n  );\n\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n      myRef.current?.focus();\n    }\n\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen && canEscKeyClose) {\n      window.addEventListener('keydown', onKeyDownEscape);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', onKeyDownEscape);\n    };\n  }, [isOpen, canEscKeyClose, onKeyDownEscape]);\n\n  return createPortal(\n    <S.ModalWrapper>\n      {isOpen && (\n        <>\n          <S.Backdrop onClick={canBackdropClose ? closeModal : undefined} />\n          <S.Content ref={myRef} aria-modal={isOpen} {...rest}>\n            {hasCloseButton && (\n              <S.CloseButton type='button' onClick={closeModal} aria-label='모달 닫기'>\n                <CloseIcon width={24} height={24} />\n              </S.CloseButton>\n            )}\n            {children}\n          </S.Content>\n        </>\n      )}\n    </S.ModalWrapper>,\n    document.body,\n  );\n};\n\nexport default Modal;\n\nconst S = {\n  ModalWrapper: styled.div`\n    position: relative;\n    z-index: 9;\n  `,\n  Backdrop: styled.div`\n    position: fixed;\n    inset: 0;\n    background: ${({ theme }) => theme.color.modalBackdrop};\n  `,\n  Content: styled.dialog`\n    position: fixed;\n    inset: 50% auto auto 50%;\n    display: flex;\n    justify-content: center;\n    min-width: 20vw;\n    max-height: 80vh;\n    overflow: auto;\n    padding: 2.5rem;\n    border: none;\n    border-radius: 8px;\n    background-color: ${({ theme }) => theme.color.gray1};\n    transform: translate(-50%, -50%);\n  `,\n  CloseButton: styled.button`\n    position: absolute;\n    inset: 2.5rem 2.5rem auto auto;\n    border-radius: 4px;\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray4};\n    }\n  `,\n};\n"],"names":[],"sourceRoot":""}