"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[157],{"./node_modules/@tanstack/react-query/build/lib/useQuery.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>useQuery});var utils=__webpack_require__("./node_modules/@tanstack/query-core/build/lib/utils.mjs"),notifyManager=__webpack_require__("./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs"),focusManager=__webpack_require__("./node_modules/@tanstack/query-core/build/lib/focusManager.mjs"),subscribable=__webpack_require__("./node_modules/@tanstack/query-core/build/lib/subscribable.mjs"),retryer=__webpack_require__("./node_modules/@tanstack/query-core/build/lib/retryer.mjs");class QueryObserver extends subscribable.l{constructor(client,options){super(),this.client=client,this.options=options,this.trackedProps=new Set,this.selectError=null,this.bindMethods(),this.setOptions(options)}bindMethods(){this.remove=this.remove.bind(this),this.refetch=this.refetch.bind(this)}onSubscribe(){1===this.listeners.size&&(this.currentQuery.addObserver(this),shouldFetchOnMount(this.currentQuery,this.options)&&this.executeFetch(),this.updateTimers())}onUnsubscribe(){this.hasListeners()||this.destroy()}shouldFetchOnReconnect(){return shouldFetchOn(this.currentQuery,this.options,this.options.refetchOnReconnect)}shouldFetchOnWindowFocus(){return shouldFetchOn(this.currentQuery,this.options,this.options.refetchOnWindowFocus)}destroy(){this.listeners=new Set,this.clearStaleTimeout(),this.clearRefetchInterval(),this.currentQuery.removeObserver(this)}setOptions(options,notifyOptions){const prevOptions=this.options,prevQuery=this.currentQuery;if(this.options=this.client.defaultQueryOptions(options),(0,utils.VS)(prevOptions,this.options)||this.client.getQueryCache().notify({type:"observerOptionsUpdated",query:this.currentQuery,observer:this}),void 0!==this.options.enabled&&"boolean"!=typeof this.options.enabled)throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=prevOptions.queryKey),this.updateQuery();const mounted=this.hasListeners();mounted&&shouldFetchOptionally(this.currentQuery,prevQuery,this.options,prevOptions)&&this.executeFetch(),this.updateResult(notifyOptions),!mounted||this.currentQuery===prevQuery&&this.options.enabled===prevOptions.enabled&&this.options.staleTime===prevOptions.staleTime||this.updateStaleTimeout();const nextRefetchInterval=this.computeRefetchInterval();!mounted||this.currentQuery===prevQuery&&this.options.enabled===prevOptions.enabled&&nextRefetchInterval===this.currentRefetchInterval||this.updateRefetchInterval(nextRefetchInterval)}getOptimisticResult(options){const query=this.client.getQueryCache().build(this.client,options),result=this.createResult(query,options);return function shouldAssignObserverCurrentProperties(observer,optimisticResult,options){if(options.keepPreviousData)return!1;if(void 0!==options.placeholderData)return optimisticResult.isPlaceholderData;if(!(0,utils.VS)(observer.getCurrentResult(),optimisticResult))return!0;return!1}(this,result,options)&&(this.currentResult=result,this.currentResultOptions=this.options,this.currentResultState=this.currentQuery.state),result}getCurrentResult(){return this.currentResult}trackResult(result){const trackedResult={};return Object.keys(result).forEach((key=>{Object.defineProperty(trackedResult,key,{configurable:!1,enumerable:!0,get:()=>(this.trackedProps.add(key),result[key])})})),trackedResult}getCurrentQuery(){return this.currentQuery}remove(){this.client.getQueryCache().remove(this.currentQuery)}refetch({refetchPage,...options}={}){return this.fetch({...options,meta:{refetchPage}})}fetchOptimistic(options){const defaultedOptions=this.client.defaultQueryOptions(options),query=this.client.getQueryCache().build(this.client,defaultedOptions);return query.isFetchingOptimistic=!0,query.fetch().then((()=>this.createResult(query,defaultedOptions)))}fetch(fetchOptions){var _fetchOptions$cancelR;return this.executeFetch({...fetchOptions,cancelRefetch:null==(_fetchOptions$cancelR=fetchOptions.cancelRefetch)||_fetchOptions$cancelR}).then((()=>(this.updateResult(),this.currentResult)))}executeFetch(fetchOptions){this.updateQuery();let promise=this.currentQuery.fetch(this.options,fetchOptions);return null!=fetchOptions&&fetchOptions.throwOnError||(promise=promise.catch(utils.ZT)),promise}updateStaleTimeout(){if(this.clearStaleTimeout(),utils.sk||this.currentResult.isStale||!(0,utils.PN)(this.options.staleTime))return;const timeout=(0,utils.Kp)(this.currentResult.dataUpdatedAt,this.options.staleTime)+1;this.staleTimeoutId=setTimeout((()=>{this.currentResult.isStale||this.updateResult()}),timeout)}computeRefetchInterval(){var _this$options$refetch;return"function"==typeof this.options.refetchInterval?this.options.refetchInterval(this.currentResult.data,this.currentQuery):null!=(_this$options$refetch=this.options.refetchInterval)&&_this$options$refetch}updateRefetchInterval(nextInterval){this.clearRefetchInterval(),this.currentRefetchInterval=nextInterval,!utils.sk&&!1!==this.options.enabled&&(0,utils.PN)(this.currentRefetchInterval)&&0!==this.currentRefetchInterval&&(this.refetchIntervalId=setInterval((()=>{(this.options.refetchIntervalInBackground||focusManager.j.isFocused())&&this.executeFetch()}),this.currentRefetchInterval))}updateTimers(){this.updateStaleTimeout(),this.updateRefetchInterval(this.computeRefetchInterval())}clearStaleTimeout(){this.staleTimeoutId&&(clearTimeout(this.staleTimeoutId),this.staleTimeoutId=void 0)}clearRefetchInterval(){this.refetchIntervalId&&(clearInterval(this.refetchIntervalId),this.refetchIntervalId=void 0)}createResult(query,options){const prevQuery=this.currentQuery,prevOptions=this.options,prevResult=this.currentResult,prevResultState=this.currentResultState,prevResultOptions=this.currentResultOptions,queryChange=query!==prevQuery,queryInitialState=queryChange?query.state:this.currentQueryInitialState,prevQueryResult=queryChange?this.currentResult:this.previousQueryResult,{state}=query;let data,{dataUpdatedAt,error,errorUpdatedAt,fetchStatus,status}=state,isPreviousData=!1,isPlaceholderData=!1;if(options._optimisticResults){const mounted=this.hasListeners(),fetchOnMount=!mounted&&shouldFetchOnMount(query,options),fetchOptionally=mounted&&shouldFetchOptionally(query,prevQuery,options,prevOptions);(fetchOnMount||fetchOptionally)&&(fetchStatus=(0,retryer.Kw)(query.options.networkMode)?"fetching":"paused",dataUpdatedAt||(status="loading")),"isRestoring"===options._optimisticResults&&(fetchStatus="idle")}if(options.keepPreviousData&&!state.dataUpdatedAt&&null!=prevQueryResult&&prevQueryResult.isSuccess&&"error"!==status)data=prevQueryResult.data,dataUpdatedAt=prevQueryResult.dataUpdatedAt,status=prevQueryResult.status,isPreviousData=!0;else if(options.select&&void 0!==state.data)if(prevResult&&state.data===(null==prevResultState?void 0:prevResultState.data)&&options.select===this.selectFn)data=this.selectResult;else try{this.selectFn=options.select,data=options.select(state.data),data=(0,utils.oE)(null==prevResult?void 0:prevResult.data,data,options),this.selectResult=data,this.selectError=null}catch(selectError){0,this.selectError=selectError}else data=state.data;if(void 0!==options.placeholderData&&void 0===data&&"loading"===status){let placeholderData;if(null!=prevResult&&prevResult.isPlaceholderData&&options.placeholderData===(null==prevResultOptions?void 0:prevResultOptions.placeholderData))placeholderData=prevResult.data;else if(placeholderData="function"==typeof options.placeholderData?options.placeholderData():options.placeholderData,options.select&&void 0!==placeholderData)try{placeholderData=options.select(placeholderData),this.selectError=null}catch(selectError){0,this.selectError=selectError}void 0!==placeholderData&&(status="success",data=(0,utils.oE)(null==prevResult?void 0:prevResult.data,placeholderData,options),isPlaceholderData=!0)}this.selectError&&(error=this.selectError,data=this.selectResult,errorUpdatedAt=Date.now(),status="error");const isFetching="fetching"===fetchStatus,isLoading="loading"===status,isError="error"===status;return{status,fetchStatus,isLoading,isSuccess:"success"===status,isError,isInitialLoading:isLoading&&isFetching,data,dataUpdatedAt,error,errorUpdatedAt,failureCount:state.fetchFailureCount,failureReason:state.fetchFailureReason,errorUpdateCount:state.errorUpdateCount,isFetched:state.dataUpdateCount>0||state.errorUpdateCount>0,isFetchedAfterMount:state.dataUpdateCount>queryInitialState.dataUpdateCount||state.errorUpdateCount>queryInitialState.errorUpdateCount,isFetching,isRefetching:isFetching&&!isLoading,isLoadingError:isError&&0===state.dataUpdatedAt,isPaused:"paused"===fetchStatus,isPlaceholderData,isPreviousData,isRefetchError:isError&&0!==state.dataUpdatedAt,isStale:isStale(query,options),refetch:this.refetch,remove:this.remove}}updateResult(notifyOptions){const prevResult=this.currentResult,nextResult=this.createResult(this.currentQuery,this.options);if(this.currentResultState=this.currentQuery.state,this.currentResultOptions=this.options,(0,utils.VS)(nextResult,prevResult))return;this.currentResult=nextResult;const defaultNotifyOptions={cache:!0};!1!==(null==notifyOptions?void 0:notifyOptions.listeners)&&(()=>{if(!prevResult)return!0;const{notifyOnChangeProps}=this.options,notifyOnChangePropsValue="function"==typeof notifyOnChangeProps?notifyOnChangeProps():notifyOnChangeProps;if("all"===notifyOnChangePropsValue||!notifyOnChangePropsValue&&!this.trackedProps.size)return!0;const includedProps=new Set(null!=notifyOnChangePropsValue?notifyOnChangePropsValue:this.trackedProps);return this.options.useErrorBoundary&&includedProps.add("error"),Object.keys(this.currentResult).some((key=>{const typedKey=key;return this.currentResult[typedKey]!==prevResult[typedKey]&&includedProps.has(typedKey)}))})()&&(defaultNotifyOptions.listeners=!0),this.notify({...defaultNotifyOptions,...notifyOptions})}updateQuery(){const query=this.client.getQueryCache().build(this.client,this.options);if(query===this.currentQuery)return;const prevQuery=this.currentQuery;this.currentQuery=query,this.currentQueryInitialState=query.state,this.previousQueryResult=this.currentResult,this.hasListeners()&&(null==prevQuery||prevQuery.removeObserver(this),query.addObserver(this))}onQueryUpdate(action){const notifyOptions={};"success"===action.type?notifyOptions.onSuccess=!action.manual:"error"!==action.type||(0,retryer.DV)(action.error)||(notifyOptions.onError=!0),this.updateResult(notifyOptions),this.hasListeners()&&this.updateTimers()}notify(notifyOptions){notifyManager.V.batch((()=>{var _this$options$onSucce,_this$options,_this$options$onSettl,_this$options2;if(notifyOptions.onSuccess)null==(_this$options$onSucce=(_this$options=this.options).onSuccess)||_this$options$onSucce.call(_this$options,this.currentResult.data),null==(_this$options$onSettl=(_this$options2=this.options).onSettled)||_this$options$onSettl.call(_this$options2,this.currentResult.data,null);else if(notifyOptions.onError){var _this$options$onError,_this$options3,_this$options$onSettl2,_this$options4;null==(_this$options$onError=(_this$options3=this.options).onError)||_this$options$onError.call(_this$options3,this.currentResult.error),null==(_this$options$onSettl2=(_this$options4=this.options).onSettled)||_this$options$onSettl2.call(_this$options4,void 0,this.currentResult.error)}notifyOptions.listeners&&this.listeners.forEach((({listener})=>{listener(this.currentResult)})),notifyOptions.cache&&this.client.getQueryCache().notify({query:this.currentQuery,type:"observerResultsUpdated"})}))}}function shouldFetchOnMount(query,options){return function shouldLoadOnMount(query,options){return!(!1===options.enabled||query.state.dataUpdatedAt||"error"===query.state.status&&!1===options.retryOnMount)}(query,options)||query.state.dataUpdatedAt>0&&shouldFetchOn(query,options,options.refetchOnMount)}function shouldFetchOn(query,options,field){if(!1!==options.enabled){const value="function"==typeof field?field(query):field;return"always"===value||!1!==value&&isStale(query,options)}return!1}function shouldFetchOptionally(query,prevQuery,options,prevOptions){return!1!==options.enabled&&(query!==prevQuery||!1===prevOptions.enabled)&&(!options.suspense||"error"!==query.state.status)&&isStale(query,options)}function isStale(query,options){return query.isStaleByTime(options.staleTime)}var react=__webpack_require__("./node_modules/react/index.js"),useSyncExternalStore=__webpack_require__("./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs");function createValue(){let isReset=!1;return{clearReset:()=>{isReset=!1},reset:()=>{isReset=!0},isReset:()=>isReset}}const QueryErrorResetBoundaryContext=react.createContext(createValue()),useQueryErrorResetBoundary=()=>react.useContext(QueryErrorResetBoundaryContext);var QueryClientProvider=__webpack_require__("./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs");const IsRestoringContext=react.createContext(!1),useIsRestoring=()=>react.useContext(IsRestoringContext);IsRestoringContext.Provider;var lib_utils=__webpack_require__("./node_modules/@tanstack/react-query/build/lib/utils.mjs");const ensurePreventErrorBoundaryRetry=(options,errorResetBoundary)=>{(options.suspense||options.useErrorBoundary)&&(errorResetBoundary.isReset()||(options.retryOnMount=!1))},useClearResetErrorBoundary=errorResetBoundary=>{react.useEffect((()=>{errorResetBoundary.clearReset()}),[errorResetBoundary])},getHasError=({result,errorResetBoundary,useErrorBoundary,query})=>result.isError&&!errorResetBoundary.isReset()&&!result.isFetching&&(0,lib_utils.L)(useErrorBoundary,[result.error,query]),ensureStaleTime=defaultedOptions=>{defaultedOptions.suspense&&"number"!=typeof defaultedOptions.staleTime&&(defaultedOptions.staleTime=1e3)},shouldSuspend=(defaultedOptions,result,isRestoring)=>(null==defaultedOptions?void 0:defaultedOptions.suspense)&&((result,isRestoring)=>result.isLoading&&result.isFetching&&!isRestoring)(result,isRestoring),fetchOptimistic=(defaultedOptions,observer,errorResetBoundary)=>observer.fetchOptimistic(defaultedOptions).then((({data})=>{null==defaultedOptions.onSuccess||defaultedOptions.onSuccess(data),null==defaultedOptions.onSettled||defaultedOptions.onSettled(data,null)})).catch((error=>{errorResetBoundary.clearReset(),null==defaultedOptions.onError||defaultedOptions.onError(error),null==defaultedOptions.onSettled||defaultedOptions.onSettled(void 0,error)}));function useQuery(arg1,arg2,arg3){return function useBaseQuery(options,Observer){const queryClient=(0,QueryClientProvider.NL)({context:options.context}),isRestoring=useIsRestoring(),errorResetBoundary=useQueryErrorResetBoundary(),defaultedOptions=queryClient.defaultQueryOptions(options);defaultedOptions._optimisticResults=isRestoring?"isRestoring":"optimistic",defaultedOptions.onError&&(defaultedOptions.onError=notifyManager.V.batchCalls(defaultedOptions.onError)),defaultedOptions.onSuccess&&(defaultedOptions.onSuccess=notifyManager.V.batchCalls(defaultedOptions.onSuccess)),defaultedOptions.onSettled&&(defaultedOptions.onSettled=notifyManager.V.batchCalls(defaultedOptions.onSettled)),ensureStaleTime(defaultedOptions),ensurePreventErrorBoundaryRetry(defaultedOptions,errorResetBoundary),useClearResetErrorBoundary(errorResetBoundary);const[observer]=react.useState((()=>new Observer(queryClient,defaultedOptions))),result=observer.getOptimisticResult(defaultedOptions);if((0,useSyncExternalStore.$)(react.useCallback((onStoreChange=>{const unsubscribe=isRestoring?()=>{}:observer.subscribe(notifyManager.V.batchCalls(onStoreChange));return observer.updateResult(),unsubscribe}),[observer,isRestoring]),(()=>observer.getCurrentResult()),(()=>observer.getCurrentResult())),react.useEffect((()=>{observer.setOptions(defaultedOptions,{listeners:!1})}),[defaultedOptions,observer]),shouldSuspend(defaultedOptions,result,isRestoring))throw fetchOptimistic(defaultedOptions,observer,errorResetBoundary);if(getHasError({result,errorResetBoundary,useErrorBoundary:defaultedOptions.useErrorBoundary,query:observer.getCurrentQuery()}))throw result.error;return defaultedOptions.notifyOnChangeProps?result:observer.trackResult(result)}((0,utils._v)(arg1,arg2,arg3),QueryObserver)}}}]);