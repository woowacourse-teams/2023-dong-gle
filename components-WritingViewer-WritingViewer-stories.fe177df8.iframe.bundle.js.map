{"version":3,"file":"components-WritingViewer-WritingViewer-stories.fe177df8.iframe.bundle.js","mappings":";;;;;;AAgJA;;;AAIA;;;;;;;AAOA;;;AAGA;;AAGA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;;ACvHA;;;;AAIA;;;;AAIA;;;AAMA;AAEA;;;;;AAKA;AAGA;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;;;;;;;;;;;;;ACpIA;AAbA;AACA;AAEA;AACA;AACA;AAGA;;ACYA;;;AAIA;AACA;;AAEA;AACA;;;AAGA;;;;;;;AC1CA;;;;;AAaA;;;;AAAA;AACA","sources":["webpack://frontend/./src/components/WritingViewer/WritingTitle/WritingTitle.tsx","webpack://frontend/./src/components/WritingViewer/WritingViewer.tsx","webpack://frontend/./src/components/@common/Divider/Divider.tsx","webpack://frontend/./src/components/@common/Spinner/Spinner.tsx","webpack://frontend/./src/styles/storybook.ts"],"sourcesContent":["import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { css, styled } from 'styled-components';\nimport { PencilIcon } from 'assets/icons';\nimport { updateWritingTitle as updateWritingTitleRequest } from 'apis/writings';\nimport { ChangeEvent, KeyboardEventHandler, useEffect, useRef } from 'react';\nimport { getErrorMessage } from 'utils/error';\nimport { useToast } from 'hooks/@common/useToast';\nimport { validateWritingTitle } from 'utils/validators';\nimport { GetWritingResponse } from 'types/apis/writings';\nimport { GetCategoryDetailResponse } from 'types/apis/category';\nimport useControlledInput from 'hooks/@common/useControlledInput';\n\ntype Props = {\n  writingId: number;\n  categoryId: number;\n  title: string;\n  canEditTitle?: boolean;\n};\n\nconst WritingTitle = ({ writingId, categoryId, title, canEditTitle = true }: Props) => {\n  const {\n    value: inputTitle,\n    setValue: setInputTitle,\n    inputRef,\n    escapeInput: escapeRename,\n    isInputOpen,\n    openInput,\n    resetInput,\n  } = useControlledInput(title);\n  const myRef = useRef<HTMLHeadingElement>(null);\n  const queryClient = useQueryClient();\n  const toast = useToast();\n\n  const { mutate: updateWritingTitle } = useMutation(updateWritingTitleRequest, {\n    onMutate: async ({ writingId, body: { title } }) => {\n      await queryClient.cancelQueries(['writings', writingId]);\n      await queryClient.cancelQueries(['writingsInCategory', categoryId]);\n\n      const previousWritings = queryClient.getQueryData<GetWritingResponse>([\n        'writings',\n        writingId,\n      ]);\n      const previousWritingsInCategory = queryClient.getQueryData<GetCategoryDetailResponse>([\n        'writingsInCategory',\n        categoryId,\n      ]);\n\n      previousWritings &&\n        queryClient.setQueryData(['writings', writingId], (old: any) => {\n          return { ...old, title };\n        });\n\n      previousWritingsInCategory &&\n        queryClient.setQueryData(['writingsInCategory', categoryId], (old: any) => {\n          return {\n            ...old,\n            writings: old.writings.map((writing: any) => {\n              return writing.id === writingId ? { id: writing.id, title } : writing;\n            }),\n          };\n        });\n\n      return { previousWritings, previousWritingsInCategory };\n    },\n    onError: (error, _, context) => {\n      setInputTitle(context?.previousWritings?.title || '');\n      queryClient.setQueryData(['writings', writingId], context?.previousWritings);\n      queryClient.setQueryData(\n        ['writingsInCategory', categoryId],\n        context?.previousWritingsInCategory,\n      );\n      toast.show({ type: 'error', message: '글 제목 수정에 실패했습니다.' });\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries(['writings', writingId]);\n      queryClient.invalidateQueries(['writingsInCategory', categoryId]);\n    },\n  });\n\n  const requestChangedName: KeyboardEventHandler<HTMLInputElement> = (e) => {\n    try {\n      if (e.key !== 'Enter') return;\n\n      const writingTitle = e.currentTarget.value.trim();\n\n      validateWritingTitle(writingTitle);\n\n      resetInput();\n\n      updateWritingTitle({\n        writingId,\n        body: {\n          title: writingTitle,\n        },\n      });\n    } catch (error) {\n      toast.show({ type: 'error', message: getErrorMessage(error) });\n    }\n  };\n\n  useEffect(() => {\n    myRef.current?.focus();\n  }, [writingId]);\n\n  return (\n    <S.TitleWrapper>\n      {isInputOpen ? (\n        <S.Input\n          type='text'\n          placeholder='새 제목을 입력해주세요'\n          defaultValue={title}\n          value={inputTitle}\n          ref={inputRef}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => setInputTitle(e.target.value)}\n          onBlur={resetInput}\n          onKeyDown={escapeRename}\n          onKeyUp={requestChangedName}\n        />\n      ) : (\n        <>\n          <S.Title ref={myRef} tabIndex={0}>\n            {inputTitle}\n          </S.Title>\n          {canEditTitle && (\n            <S.Button aria-label={'글 제목 수정'} onClick={openInput}>\n              <PencilIcon width={20} height={20} />\n            </S.Button>\n          )}\n        </>\n      )}\n    </S.TitleWrapper>\n  );\n};\n\nexport default WritingTitle;\n\nconst S = {\n  TitleWrapper: styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding-bottom: 2rem;\n    gap: 0.3rem;\n  `,\n  Title: styled.h1`\n    font-size: 4rem;\n    padding: 0.1rem;\n  `,\n  Button: styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-shrink: 0;\n    border-radius: 12px;\n    padding: 1rem;\n    background-color: ${({ theme }) => theme.color.gray4};\n\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray5};\n    }\n  `,\n  Input: styled.input`\n    font-size: 4rem;\n    font-weight: 700;\n    width: 100%;\n    ${({ theme }) => css`\n      border: 1px solid ${theme.color.gray1};\n      outline: 1px solid ${theme.color.gray1};\n    `}\n    ${({ disabled }) => css`\n      background-color: ${disabled ? 'initial' : 'desiredColor'};\n      color: ${disabled ? 'initial' : 'desiredColor'};\n    `}\n  `,\n};\n","import DOMPurify from 'dompurify';\nimport { css, styled } from 'styled-components';\nimport { getWriting } from 'apis/writings';\nimport Divider from 'components/@common/Divider/Divider';\nimport Spinner from 'components/@common/Spinner/Spinner';\nimport { useQuery } from '@tanstack/react-query';\nimport WritingTitle from './WritingTitle/WritingTitle';\nimport useCodeHighlight from 'hooks/@common/useCodeHighlight';\nimport { MAX_WIDTH } from 'constants/style';\n\ntype Props = {\n  writingId: number;\n  categoryId: number;\n  isDeletedWriting?: boolean;\n};\n\nconst WritingViewer = ({ writingId, categoryId, isDeletedWriting }: Props) => {\n  const { data, isLoading } = useQuery(['writings', writingId], () => getWriting(writingId));\n  useCodeHighlight(data?.content);\n\n  if (isLoading) {\n    return (\n      <S.LoadingContainer>\n        <Spinner size={60} thickness={4} />\n        <h1>글을 불러오는 중입니다 ...</h1>\n      </S.LoadingContainer>\n    );\n  }\n\n  return (\n    <S.WritingViewerContainer>\n      <WritingTitle\n        categoryId={categoryId}\n        writingId={writingId}\n        title={data?.title ?? ''}\n        canEditTitle={!isDeletedWriting}\n      />\n      <Divider />\n      <S.ContentWrapper\n        tabIndex={0}\n        dangerouslySetInnerHTML={{\n          __html: DOMPurify.sanitize(data?.content ?? '글 내용이 없습니다'),\n        }}\n      />\n    </S.WritingViewerContainer>\n  );\n};\n\nexport default WritingViewer;\n\nconst generateResponsiveStyle = {\n  writingViewerContainer: css`\n    @media (max-width: ${MAX_WIDTH.tablet}) {\n      padding: 6rem;\n    }\n\n    @media (max-width: ${MAX_WIDTH.mobileLarge}) {\n      padding: 5rem;\n    }\n\n    @media (max-width: ${MAX_WIDTH.mobileMedium}) {\n      padding: 3rem;\n    }\n  `,\n};\n\nconst S = {\n  WritingViewerContainer: styled.section`\n    ${generateResponsiveStyle.writingViewerContainer}\n\n    padding: 8rem;\n    width: 100%;\n    overflow-wrap: break-word;\n    background-color: ${({ theme }) => theme.color.gray1};\n  `,\n\n  LoadingContainer: styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 2rem;\n    max-width: 100%;\n    height: 100%;\n  `,\n\n  ContentWrapper: styled.section`\n    padding: 1.6rem 0;\n    font-size: 1.6rem;\n\n    h1 {\n      padding: 3.4rem 0 1.7rem;\n      font-size: 3.4rem;\n    }\n\n    h2 {\n      padding: 2.8rem 0 1.4rem;\n      font-size: 2.8rem;\n    }\n\n    h3 {\n      padding: 2.2rem 0 1.1rem;\n      font-size: 2.2rem;\n    }\n\n    h4 {\n      padding: 1.6rem 0 0.8rem;\n      font-size: 1.6rem;\n    }\n\n    h5 {\n      padding: 1.3rem 0 0.65rem;\n      font-size: 1.3rem;\n    }\n\n    h6 {\n      padding: 1rem 0 0.5rem;\n      font-size: 1rem;\n    }\n\n    p {\n      padding: 1rem 0;\n      font-size: 1.6rem;\n      line-height: 2.3rem;\n    }\n\n    blockquote {\n      padding: 1rem 2rem;\n      margin: 1.6rem 0;\n      border-left: 4px solid ${({ theme }) => theme.color.gray8};\n      background-color: ${({ theme }) => theme.color.gray2};\n      color: ${({ theme }) => theme.color.gray9};\n      line-height: 2.4rem;\n    }\n\n    ol,\n    ul {\n      padding-left: 2rem;\n    }\n\n    ul > li {\n      list-style: disc;\n    }\n\n    ol > li {\n      list-style: decimal;\n    }\n\n    li {\n      padding: 0.5rem 0;\n    }\n\n    a {\n      color: #0968da;\n      text-decoration: underline;\n      &:visited {\n        color: #0968da;\n      }\n    }\n\n    code {\n      padding: 0.2rem 0.4rem;\n      margin: 0.1rem;\n      border: none solid #eee;\n      border-radius: 4px;\n      background-color: ${({ theme }) => theme.color.gray4};\n      color: #d71919;\n    }\n\n    pre > code {\n      color: inherit;\n      background-color: transparent;\n    }\n\n    img {\n      max-width: 100%;\n      height: auto;\n    }\n\n    strong {\n      font-weight: bold;\n    }\n\n    em {\n      font-style: italic;\n    }\n  `,\n};\n","import { css, styled } from 'styled-components';\nimport { theme } from 'styles/theme';\n\ntype Props = {\n  length?: string;\n  direction?: 'horizontal' | 'vertical';\n};\n\nconst Divider = ({ length = '100%', direction = 'horizontal' }: Props) => {\n  return <S.Divider $length={length} $direction={direction} />;\n};\n\nexport default Divider;\n\nexport const genDirectionStyling = (\n  direction: Required<Props>['direction'],\n  length: Required<Props>['length'],\n) => {\n  const style = {\n    horizontal: css`\n      border-bottom: 1px solid ${theme.color.gray5};\n      width: ${length};\n    `,\n    vertical: css`\n      border-left: 1px solid ${theme.color.gray5};\n      height: ${length};\n    `,\n  };\n  return style[direction];\n};\n\nconst S = {\n  Divider: styled.div<{ $length: string; $direction: 'horizontal' | 'vertical' }>`\n    ${({ $direction, $length }) => genDirectionStyling($direction, $length)};\n  `,\n};\n","import { css, styled } from 'styled-components';\nimport { rotation } from 'styles/animation';\nimport { theme } from 'styles/theme';\n\ntype Props = {\n  size: number;\n  thickness: number;\n  duration: number;\n  backgroundColor: string;\n  barColor: string;\n};\n\nconst Spinner = ({\n  size = 30,\n  thickness = 4,\n  duration = 1,\n  backgroundColor = theme.color.gray4,\n  barColor = theme.color.primary,\n}: Partial<Props>) => {\n  return (\n    <S.Spinner\n      $size={size}\n      $thickness={thickness}\n      $duration={duration}\n      $backgroundColor={backgroundColor}\n      $barColor={barColor}\n    />\n  );\n};\n\nexport default Spinner;\n\nconst S = {\n  Spinner: styled.div<{\n    $size: number;\n    $thickness: number;\n    $duration: number;\n    $backgroundColor: string;\n    $barColor: string;\n  }>`\n    ${({ $size, $thickness, $backgroundColor, $barColor, $duration }) => {\n      return css`\n        display: inline-block;\n\n        width: ${$size}px;\n        height: ${$size}px;\n\n        border: ${$thickness}px solid ${$backgroundColor};\n        border-bottom-color: ${$barColor};\n        border-radius: 50%;\n\n        animation: ${rotation} ${$duration}s linear infinite;\n      `;\n    }}\n  `,\n};\n","import { styled } from 'styled-components';\n\nexport const StoryContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  gap: 28px;\n`;\n\nexport const StoryItemContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 12px;\n`;\n\nexport const StoryItemContainerRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 12px;\n`;\n\nexport const StoryItemTitle = styled.h3`\n  color: ${({ theme }) => theme.color.gray9};\n  font-size: 12px;\n  font-weight: 400;\n  text-transform: uppercase;\n`;\n"],"names":[],"sourceRoot":""}