{"version":3,"file":"components-WritingPropertySection-WritingPropertySection-stories.52cd08d0.iframe.bundle.js","mappings":";;;;AAwBA;;AAEA;;;;;;;ACiFA;;;;;;AAOA;;;;AAKA;AACA;AAEA;AACA;;;;AAKA;;;;;;;AAQA;;;AAIA;;;;;;AAMA;;;;;;;;AASA;AACA;;;;AAKA;;AAIA;AACA;;;;;;;AC7JA;;;;;AAaA;;;;AAAA;AACA","sources":["webpack://frontend/./src/components/@common/Tag/Tag.tsx","webpack://frontend/./src/components/WritingPropertySection/WritingPropertySection.tsx","webpack://frontend/./src/styles/storybook.ts"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport { styled } from 'styled-components';\nimport { CloseIcon } from 'assets/icons';\n\ntype Props = {\n  removable?: boolean;\n} & ComponentPropsWithoutRef<'button'>;\n\nconst Tag = ({ removable = true, children, ...rest }: Props) => {\n  return (\n    <S.Tag {...rest}>\n      #{children}\n      {removable && <CloseIcon width={14} height={14} />}\n    </S.Tag>\n  );\n};\n\nexport default Tag;\n\nconst S = {\n  Tag: styled.button`\n    display: inline-flex;\n    align-items: center;\n    padding: 0.6rem;\n    background-color: ${({ theme }) => theme.color.gray4};\n    border-radius: 8px;\n    color: ${({ theme }) => theme.color.gray8};\n    font-size: 1.2rem;\n    font-weight: 600;\n  `,\n};\n","import { Fragment } from 'react';\nimport { getWritingProperties } from 'apis/writings';\nimport { CalendarIcon, HyperlinkIcon, TagIcon } from 'assets/icons';\nimport Tag from 'components/@common/Tag/Tag';\nimport { styled } from 'styled-components';\nimport { dateFormatter } from 'utils/date';\nimport { useQuery } from '@tanstack/react-query';\nimport { BLOG_ICON, BLOG_KOREAN } from 'constants/blog';\n\ntype Props = {\n  writingId: number;\n};\n\nconst WritingPropertySection = ({ writingId }: Props) => {\n  const { data: writingInfo } = useQuery(['writingProperties', writingId], () =>\n    getWritingProperties(writingId),\n  );\n\n  if (!writingInfo) return null;\n\n  return (\n    <S.WritingPropertySection>\n      <S.SectionTitle>정보</S.SectionTitle>\n      <S.InfoList>\n        <S.Info>\n          <S.InfoTitle>글 정보</S.InfoTitle>\n          <S.InfoContent>\n            <S.PropertyRow>\n              <S.PropertyName>\n                <CalendarIcon width={12} height={12} />\n                생성 날짜\n              </S.PropertyName>\n              <S.PropertyValue>\n                {dateFormatter(writingInfo.createdAt, 'YYYY/MM/DD HH:MM')}\n              </S.PropertyValue>\n            </S.PropertyRow>\n          </S.InfoContent>\n        </S.Info>\n        {Boolean(writingInfo.publishedDetails.length) && (\n          <S.Info>\n            <S.InfoTitle>발행 정보</S.InfoTitle>\n            <S.InfoContent>\n              {writingInfo.publishedDetails.map(\n                ({ blogName, publishedAt, tags, publishedUrl }, index) => {\n                  return (\n                    <Fragment key={index}>\n                      <S.PropertyRow>\n                        <S.PropertyName>\n                          {BLOG_ICON[blogName]} {BLOG_KOREAN[blogName]}\n                        </S.PropertyName>\n                      </S.PropertyRow>\n                      {publishedUrl && ( // 해당 기능 추가 이전에 발행된 글에 대응하는 로직입니다. 이전에 발행된 글들은 발행 링크가 없고, 재발행 이외에는 받아 올 수 있는 방법이 없어서 불가피하게 해당 코드를 작성했습니다.\n                        <S.PropertyRow>\n                          <S.PropertyName>\n                            <HyperlinkIcon width={10} height={10} />\n                            발행 링크\n                          </S.PropertyName>\n                          <S.PropertyValue>\n                            <S.BlogLink href={publishedUrl} target='_blank' rel='external'>\n                              블로그로 이동하기\n                            </S.BlogLink>\n                          </S.PropertyValue>\n                        </S.PropertyRow>\n                      )}\n                      <S.PropertyRow>\n                        <S.PropertyName>\n                          <CalendarIcon width={12} height={12} />\n                          발행일\n                        </S.PropertyName>\n                        <S.PropertyValue>\n                          {dateFormatter(publishedAt, 'YYYY/MM/DD HH:MM')}\n                        </S.PropertyValue>\n                      </S.PropertyRow>\n                      <S.PropertyRow>\n                        <S.PropertyName>\n                          <TagIcon width={12} height={12} />\n                          태그\n                        </S.PropertyName>\n                        <S.PropertyValue>\n                          {tags.map((tag) => (\n                            <Tag key={tag} removable={false}>\n                              {tag}\n                            </Tag>\n                          ))}\n                        </S.PropertyValue>\n                      </S.PropertyRow>\n                      <S.Spacer />\n                    </Fragment>\n                  );\n                },\n              )}\n            </S.InfoContent>\n          </S.Info>\n        )}\n      </S.InfoList>\n    </S.WritingPropertySection>\n  );\n};\n\nexport default WritingPropertySection;\n\nconst S = {\n  WritingPropertySection: styled.section`\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n  `,\n  SectionTitle: styled.h1`\n    display: flex;\n    gap: 1.5rem;\n    font-size: 1.5rem;\n    font-weight: 700;\n    line-height: 1.5rem;\n  `,\n  InfoList: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  `,\n  Info: styled.div`\n    color: ${({ theme }) => theme.color.gray7};\n  `,\n  InfoTitle: styled.h2`\n    color: ${({ theme }) => theme.color.gray8};\n    font-size: 1.3rem;\n    font-weight: 600;\n    line-height: 1.3rem;\n  `,\n  InfoContent: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 1.8rem;\n    padding: 1.6rem 0.9rem;\n    font-size: 1.3rem;\n    line-height: 1.3rem;\n  `,\n  PropertyRow: styled.div`\n    display: flex;\n    align-items: center;\n  `,\n  PropertyName: styled.div`\n    display: flex;\n    align-items: center;\n    flex-shrink: 0;\n    gap: 0.4rem;\n    width: 9.5rem;\n    color: ${({ theme }) => theme.color.gray8};\n    font-size: 1.3rem;\n    font-weight: 600;\n\n    svg {\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  `,\n  PropertyValue: styled.div`\n    color: ${({ theme }) => theme.color.gray10};\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.2rem;\n  `,\n  Spacer: styled.div`\n    height: 0.8rem;\n  `,\n\n  BlogLink: styled.a`\n    color: ${({ theme }) => theme.color.gray12};\n    font-weight: 500;\n  `,\n};\n","import { styled } from 'styled-components';\n\nexport const StoryContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  gap: 28px;\n`;\n\nexport const StoryItemContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 12px;\n`;\n\nexport const StoryItemContainerRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 12px;\n`;\n\nexport const StoryItemTitle = styled.h3`\n  color: ${({ theme }) => theme.color.gray9};\n  font-size: 12px;\n  font-weight: 400;\n  text-transform: uppercase;\n`;\n"],"names":[],"sourceRoot":""}