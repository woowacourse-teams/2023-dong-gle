{"version":3,"file":"components-common-FileUploader-FileUploader-stories.d65a7823.iframe.bundle.js","mappings":";;;;;;AA6CA;AAEA;AACA;;AAGA;AACA;;AAEA;;;AAGA;AAIA;AACA;;;AAKA;;AAGA;AACA;AAEA;AACA","sources":["webpack://frontend/./src/components/@common/FileUploader/FileUploader.tsx"],"sourcesContent":["import { InputHTMLAttributes, useEffect } from 'react';\nimport { css, styled } from 'styled-components';\nimport { useFileUpload } from 'hooks/useFileUpload';\nimport { useFileDragAndDrop } from 'hooks/@common/useFileDragAndDrop';\nimport { ImportIcon } from 'assets/icons';\n\ntype Props = {\n  accept?: InputHTMLAttributes<HTMLInputElement>['accept'];\n  width?: string;\n  height?: string;\n  onFileSelect: (file: FormData | null) => void;\n};\n\nconst FileUploader = ({ accept = '*', width = '30rem', height = '10rem', onFileSelect }: Props) => {\n  const { onFileChange, openFinder, selectedFile } = useFileUpload(accept);\n  const { dragRef, isDragging } = useFileDragAndDrop({ onFileChange });\n\n  useEffect(() => {\n    onFileSelect(selectedFile);\n  }, [selectedFile]);\n\n  return (\n    <button ref={dragRef} onClick={openFinder}>\n      <S.Description\n        $isDragging={isDragging}\n        $width={width}\n        $height={height}\n        aria-label='파일 업로드'\n      >\n        <ImportIcon />\n        드래그하거나 클릭해서 업로드\n      </S.Description>\n    </button>\n  );\n};\n\nexport default FileUploader;\n\nconst S = {\n  Description: styled.div<{ $isDragging: boolean; $width: string; $height: string }>`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 1rem;\n    ${({ $width, $height }) => {\n      return css`\n        width: ${$width};\n        height: ${$height};\n      `;\n    }};\n    border: 2px dashed ${({ theme }) => theme.color.gray6};\n    background-color: ${({ theme }) => theme.color.gray4};\n    font-size: 1.3rem;\n    color: ${({ theme }) => theme.color.gray7};\n    transition: all 0.2s ease-in-out;\n\n    ${({ $isDragging, theme }) => {\n      return (\n        $isDragging &&\n        css`\n          border: 2px dashed ${theme.color.primary};\n          background-color: ${theme.color.gray5};\n        `\n      );\n    }}\n    &:hover {\n      background-color: ${({ theme }) => theme.color.gray5};\n    }\n  `,\n  SpinnerWrapper: styled.div<{ $width: string; $height: string }>`\n    ${({ $width, $height }) => {\n      return css`\n        width: ${$width};\n        height: ${$height};\n      `;\n    }};\n\n    display: flex;\n    justify-content: center;\n  `,\n};\n"],"names":[],"sourceRoot":""}