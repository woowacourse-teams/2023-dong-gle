{"version":3,"file":"310.426674e9.iframe.bundle.js","mappings":";AAiCA;AAbA;AACA;AAEA;AACA;AACA;AAGA;;;;;;AC8FA;;AAEA;;;;AAMA;;;AAIA;;;;;AASA;;;AAzCA;;;AAIA;;;AAKA;AAiCA;AAxFA;AACA;;;;AAIA;AACA;;;AAIA;AACA;AACA;;;;;;AAMA;;;AAIA;AACA;;AAEA;;AAGA;AACA;;AAEA;;;;AAMA;;;AAsDA;;AAGA;AACA;AAEA;;;;;;AAMA;;;;ACvHA;;;AAIA;AACA;;AAEA;AACA;;;AAGA;;;;;;AC3BA;;AAEA;;;;;;;ACoBA;;;AAGA;;;;;ACxCA;;AAEA;;AAEA;AACA;;;AAGA;;;;AAKA;;;;;;AAOA;;;;;AAMA;;;;;;;;AASA;;;;;;AAMA;;;AAIA;;;;;;;AAQA;;;;AAKA;;;;AAKA;AACA;AAEA;;;;AAMA;;AAIA;;;;;;ACUA;;;;AAMA;;;;AAMA;;AAIA;AACA;;;AAGA;;;;AAIA;;AAIA;;;;;AAOA;;;;;;ACvBA;;;;;;AAOA;;;;AAKA;AACA;AAEA;AACA;;;;AAKA;;;;;;;AAQA;;;AAIA;;;;;;AAMA;;;;;;;;AASA;AACA;;;;AAKA;;AAIA;AACA;;;;;;;ACjCA;;;;;AAKA;AAEA;;;AAIA;;;AAGA;;AAGA;;;;;;;;;AASA;;AAIA;AACA;;AAGA;;;;;;;;AC9JA;;;;;AAaA;;;;AAAA;AACA","sources":["webpack://frontend/./src/components/@common/Divider/Divider.tsx","webpack://frontend/./src/components/@common/Input/Input.tsx","webpack://frontend/./src/components/@common/Spinner/Spinner.tsx","webpack://frontend/./src/components/@common/Tag/Tag.tsx","webpack://frontend/./src/components/@common/TagInput/TagInput.tsx","webpack://frontend/./src/components/PublishingPropertySection/PublishingPropertyStyle.ts","webpack://frontend/./src/components/PublishingSection/PublishingSection.tsx","webpack://frontend/./src/components/WritingPropertySection/WritingPropertySection.tsx","webpack://frontend/./src/components/WritingSideBar/WritingSideBar.tsx","webpack://frontend/./src/styles/storybook.ts"],"sourcesContent":["import { css, styled } from 'styled-components';\nimport { theme } from 'styles/theme';\n\ntype Props = {\n  length?: string;\n  direction?: 'horizontal' | 'vertical';\n};\n\nconst Divider = ({ length = '100%', direction = 'horizontal' }: Props) => {\n  return <S.Divider $length={length} $direction={direction} />;\n};\n\nexport default Divider;\n\nexport const genDirectionStyling = (\n  direction: Required<Props>['direction'],\n  length: Required<Props>['length'],\n) => {\n  const style = {\n    horizontal: css`\n      border-bottom: 1px solid ${theme.color.gray5};\n      width: ${length};\n    `,\n    vertical: css`\n      border-left: 1px solid ${theme.color.gray5};\n      height: ${length};\n    `,\n  };\n  return style[direction];\n};\n\nconst S = {\n  Divider: styled.div<{ $length: string; $direction: 'horizontal' | 'vertical' }>`\n    ${({ $direction, $length }) => genDirectionStyling($direction, $length)};\n  `,\n};\n","import type { ComponentPropsWithRef, ForwardedRef, ReactElement } from 'react';\nimport { forwardRef, useId } from 'react';\nimport { RuleSet, css, styled } from 'styled-components';\nimport { Size } from 'types/components/common';\n\nexport const InputVariant = ['outline', 'filled', 'unstyled', 'underlined'] as const;\nexport type InputVariant = (typeof InputVariant)[number];\n\ntype Props = {\n  size: Size;\n  labelText: string;\n  supportingText: string;\n  variant: InputVariant;\n  isError: boolean;\n} & Omit<ComponentPropsWithRef<'input'>, 'size'>;\n\nconst Input = (\n  {\n    size = 'medium',\n    labelText,\n    supportingText,\n    variant = 'outline',\n    isError = false,\n    ...rest\n  }: Partial<Props>,\n  ref: ForwardedRef<HTMLInputElement>,\n) => {\n  const inputId = useId();\n  return (\n    <S.InputContainer>\n      {labelText && (\n        <S.Label htmlFor={inputId} $required={rest.required} $variant={variant}>\n          {labelText}\n        </S.Label>\n      )}\n      <S.Input\n        id={inputId}\n        ref={ref}\n        $size={size}\n        $variant={variant}\n        $isError={isError}\n        {...rest}\n      />\n      {supportingText && <S.SupportingText $isError={isError}>{supportingText}</S.SupportingText>}\n    </S.InputContainer>\n  );\n};\n\nexport default forwardRef(Input);\n\nconst genVariantStyle = (\n  variant: Required<Props>['variant'],\n  isError: Required<Props>['isError'],\n): RuleSet<object> => {\n  const styles: Record<typeof variant, ReturnType<typeof genVariantStyle>> = {\n    outline: css`\n      ${({ theme }) => css`\n        border: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n        outline: 1px solid transparent;\n\n        &:focus {\n          border: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n          outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray8};\n        }\n      `}\n    `,\n    filled: css`\n      ${({ theme }) => css`\n        background-color: ${isError ? theme.color.red1 : theme.color.gray4};\n        border: 1px solid transparent;\n        outline: 1px solid transparent;\n\n        &:focus {\n          background-color: transparent;\n          outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray8};\n        }\n      `}\n    `,\n    unstyled: css`\n      ${({ theme }) => css`\n        border: 1px solid transparent;\n        outline: 1px solid ${isError ? theme.color.red6 : theme.color.gray1};\n      `}\n    `,\n    underlined: css`\n      ${({ theme }) => css`\n        border: 1px solid transparent;\n        border-bottom: 1px solid ${isError ? theme.color.red6 : theme.color.gray6};\n        border-radius: 0;\n        outline: 1px solid transparent;\n      `}\n    `,\n  };\n  return styles[variant];\n};\n\nconst genSizeStyle = (size: Required<Props>['size']): RuleSet<object> => {\n  const styles: Record<typeof size, ReturnType<typeof genSizeStyle>> = {\n    small: css`\n      padding: 0.6rem 0.6rem;\n      font-size: 1.3rem;\n    `,\n    medium: css`\n      padding: 0.8rem 1rem;\n      font-size: 1.4rem;\n    `,\n    large: css`\n      padding: 1rem 1.2rem;\n      font-size: 1.5rem;\n    `,\n  };\n  return styles[size];\n};\n\nconst S = {\n  InputContainer: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 0.6rem;\n    font-size: 1.3rem;\n  `,\n\n  Label: styled.label<{ $required: boolean | undefined; $variant: InputVariant }>`\n    font-weight: 500;\n    ${({ $required, theme }) =>\n      $required &&\n      css`\n        &::after {\n          content: '*';\n          margin-left: 0.2rem;\n          color: ${theme.color.red6};\n        }\n      `};\n  `,\n  Input: styled.input<{\n    $size: Size;\n    $variant: InputVariant;\n    $isError: boolean;\n  }>`\n    border: none;\n    border-radius: 4px;\n    background-color: transparent;\n\n    ${({ $size }) => genSizeStyle($size)};\n    ${({ $variant, $isError }) => genVariantStyle($variant, $isError)};\n\n    &::placeholder {\n      color: ${({ theme }) => theme.color.gray6};\n    }\n  `,\n  SupportingText: styled.p<{ $isError: boolean | undefined }>`\n    color: ${({ $isError, theme }) => ($isError ? theme.color.red6 : theme.color.gray7)};\n  `,\n  Underline: styled.div`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    height: 2px;\n    width: 100%;\n    background-color: ${({ theme }) => theme.color.primary};\n    transform: scaleX(0);\n    transition: all 0.3s ease;\n  `,\n};\n","import { css, styled } from 'styled-components';\nimport { rotation } from 'styles/animation';\nimport { theme } from 'styles/theme';\n\ntype Props = {\n  size: number;\n  thickness: number;\n  duration: number;\n  backgroundColor: string;\n  barColor: string;\n};\n\nconst Spinner = ({\n  size = 30,\n  thickness = 4,\n  duration = 1,\n  backgroundColor = theme.color.gray4,\n  barColor = theme.color.primary,\n}: Partial<Props>) => {\n  return (\n    <S.Spinner\n      $size={size}\n      $thickness={thickness}\n      $duration={duration}\n      $backgroundColor={backgroundColor}\n      $barColor={barColor}\n    />\n  );\n};\n\nexport default Spinner;\n\nconst S = {\n  Spinner: styled.div<{\n    $size: number;\n    $thickness: number;\n    $duration: number;\n    $backgroundColor: string;\n    $barColor: string;\n  }>`\n    ${({ $size, $thickness, $backgroundColor, $barColor, $duration }) => {\n      return css`\n        display: inline-block;\n\n        width: ${$size}px;\n        height: ${$size}px;\n\n        border: ${$thickness}px solid ${$backgroundColor};\n        border-bottom-color: ${$barColor};\n        border-radius: 50%;\n\n        animation: ${rotation} ${$duration}s linear infinite;\n      `;\n    }}\n  `,\n};\n","import { ComponentPropsWithoutRef } from 'react';\nimport { styled } from 'styled-components';\nimport { CloseIcon } from 'assets/icons';\n\ntype Props = {\n  removable?: boolean;\n} & ComponentPropsWithoutRef<'button'>;\n\nconst Tag = ({ removable = true, children, ...rest }: Props) => {\n  return (\n    <S.Tag {...rest}>\n      #{children}\n      {removable && <CloseIcon width={14} height={14} />}\n    </S.Tag>\n  );\n};\n\nexport default Tag;\n\nconst S = {\n  Tag: styled.button`\n    display: inline-flex;\n    align-items: center;\n    padding: 0.6rem;\n    background-color: ${({ theme }) => theme.color.gray4};\n    border-radius: 8px;\n    color: ${({ theme }) => theme.color.gray8};\n    font-size: 1.2rem;\n    font-weight: 600;\n  `,\n};\n","import { styled } from 'styled-components';\nimport { useTagInput } from './useTagInput';\nimport Tag from 'components/@common/Tag/Tag';\nimport { useEffect } from 'react';\n\ntype Props = {\n  onChangeTags: (tags: string[]) => void;\n};\n\nconst TagInput = ({ onChangeTags }: Props) => {\n  const { inputValue, tags, addTag, removeLastTag, removeTag, onInputValueChange } = useTagInput();\n\n  useEffect(() => {\n    onChangeTags(tags);\n  }, [tags]);\n\n  const TagsList = () => {\n    return tags.map((tag) => (\n      <Tag key={tag} onClick={removeTag(tag)}>\n        {tag}\n      </Tag>\n    ));\n  };\n\n  return (\n    <S.TagInputContainer>\n      <TagsList />\n      <S.Input\n        value={inputValue}\n        placeholder='태그 추가'\n        onKeyUp={addTag}\n        onKeyDown={removeLastTag}\n        onChange={onInputValueChange}\n      />\n    </S.TagInputContainer>\n  );\n};\n\nexport default TagInput;\n\nconst S = {\n  TagInputContainer: styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.2rem;\n  `,\n  Input: styled.input`\n    border: none;\n    padding: 0.4rem;\n    outline-color: ${({ theme }) => theme.color.gray1};\n  `,\n};\n","import { css, styled } from 'styled-components';\nimport { slideToLeft } from 'styles/animation';\nimport { Blog } from 'types/domain';\n\nconst PublishingPropertyStyle = {\n  PublishingPropertySection: styled.section<{ $blog: Blog }>`\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    animation: ${slideToLeft} 0.5s;\n\n    ${({ theme, $blog }) => css`\n      & > button {\n        outline-color: ${theme.color[$blog.toLowerCase()]};\n        background-color: ${theme.color[$blog.toLowerCase()]};\n\n        &:hover {\n          background-color: ${theme.color[$blog.toLowerCase()]};\n        }\n      }\n    `};\n  `,\n  SectionHeader: styled.h1`\n    display: flex;\n    gap: 1.5rem;\n    font-size: 1.5rem;\n    font-weight: 700;\n    line-height: 1.5rem;\n  `,\n  Properties: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    padding: 0 0 1rem 0.9rem;\n  `,\n  PropertyRow: styled.div`\n    display: flex;\n    align-items: center;\n\n    select,\n    input {\n      padding: 0.6rem;\n    }\n  `,\n  PropertyName: styled.div`\n    display: flex;\n    align-items: center;\n    gap: 0.6rem;\n    flex-shrink: 0;\n    width: 9.5rem;\n    color: ${({ theme }) => theme.color.gray8};\n    font-size: 1.3rem;\n    font-weight: 600;\n  `,\n  LoadingWrapper: styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 4rem;\n    font-size: 1.3rem;\n  `,\n  PublishTimeInputContainer: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 0.4rem;\n  `,\n  PublishButtonContainer: styled.div`\n    display: flex;\n    align-items: center;\n    gap: 0.6rem;\n  `,\n  PublishButton: styled.button<{ selected: boolean }>`\n    color: ${({ theme, selected }) => !selected && theme.color.gray5};\n  `,\n  PublishButtonAndTimeInputContainer: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  `,\n\n  TistoryCategorySelectWrapper: styled.div`\n    flex: 1;\n  `,\n\n  TistoryCategorySelect: styled.select`\n    width: 100%;\n  `,\n};\n\nexport default PublishingPropertyStyle;\n","import { styled } from 'styled-components';\nimport { BLOG_ICON, BLOG_KOREAN, BLOG_LIST } from 'constants/blog';\nimport type { Blog } from 'types/domain';\nimport Button from 'components/@common/Button/Button';\nimport { TabKeys } from 'components/WritingSideBar/WritingSideBar';\nimport { useMember } from 'hooks/queries/useMember';\nimport { usePageNavigate } from 'hooks/usePageNavigate';\n\ntype Props = {\n  onBlogButtonClick: (blog: Blog) => void;\n  onTabClick: (tabKey: TabKeys) => void;\n};\n\nconst PublishingSection = ({ onTabClick, onBlogButtonClick }: Props) => {\n  const { tistory, medium } = useMember();\n  const { goMyPage } = usePageNavigate();\n\n  const 블로그가하나라도연결되었는지 = tistory?.isConnected || medium?.isConnected;\n  const 모든블로그가연결되었는지 = tistory?.isConnected && medium?.isConnected;\n\n  const openPublishingPropertySection = (blog: Blog) => {\n    onBlogButtonClick(blog);\n\n    switch (blog) {\n      case 'MEDIUM':\n        onTabClick(TabKeys.MediumPublishingProperty);\n        break;\n\n      case 'TISTORY':\n        onTabClick(TabKeys.TistoryPublishingProperty);\n        break;\n    }\n  };\n\n  return (\n    <S.PublishingSection>\n      <S.PublishingTitle>발행하기</S.PublishingTitle>\n      {블로그가하나라도연결되었는지 ? (\n        <>\n          <S.BlogPublishButtonList>\n            {Object.values(BLOG_LIST).map((name) => {\n              // 연결 여부 확인을 위한 로직 추가\n              const shouldRenderButton =\n                (name === 'TISTORY' && tistory?.isConnected) ||\n                (name === 'MEDIUM' && medium?.isConnected);\n\n              // 연결이 확인되지 않으면, 버튼을 렌더링하지 않는다.\n              if (!shouldRenderButton) {\n                return null;\n              }\n              // 연결 안된 게 있으면 \"다른 블로그 연결하기\" 렌더링\n\n              return (\n                <Button\n                  key={name}\n                  size='medium'\n                  block\n                  align='left'\n                  icon={BLOG_ICON[name]}\n                  onClick={() => openPublishingPropertySection(name)}\n                >\n                  {BLOG_KOREAN[name]}\n                </Button>\n              );\n            })}\n          </S.BlogPublishButtonList>\n          {!모든블로그가연결되었는지 && (\n            <S.AddBlogConnectionButton onClick={goMyPage}>\n              블로그 추가로 연결하기\n            </S.AddBlogConnectionButton>\n          )}\n        </>\n      ) : (\n        <S.AddFirstBlogConnectionContainer>\n          <S.AddFirstBlogConnectionText>\n            블로그를 연결해서 글을 발행해보세요!\n          </S.AddFirstBlogConnectionText>\n          <Button variant='secondary' onClick={goMyPage}>\n            연결 하러가기\n          </Button>\n        </S.AddFirstBlogConnectionContainer>\n      )}\n    </S.PublishingSection>\n  );\n};\n\nexport default PublishingSection;\n\nconst S = {\n  PublishingSection: styled.section`\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n  `,\n\n  PublishingTitle: styled.h1`\n    font-size: 1.5rem;\n    font-weight: 700;\n    line-height: 1.5rem;\n  `,\n\n  BlogPublishButtonList: styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 1.6rem;\n  `,\n\n  ButtonContent: styled.div`\n    display: flex;\n  `,\n\n  AddBlogConnectionButton: styled.button`\n    color: ${({ theme }) => theme.color.gray7};\n\n    &:hover {\n      color: ${({ theme }) => theme.color.gray9};\n    }\n\n    &:active {\n      color: ${({ theme }) => theme.color.gray7};\n    }\n  `,\n\n  AddFirstBlogConnectionContainer: styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    gap: 2rem;\n  `,\n\n  AddFirstBlogConnectionText: styled.p`\n    font-size: 1.5rem;\n  `,\n};\n","import { Fragment } from 'react';\nimport { getWritingProperties } from 'apis/writings';\nimport { CalendarIcon, HyperlinkIcon, TagIcon } from 'assets/icons';\nimport Tag from 'components/@common/Tag/Tag';\nimport { styled } from 'styled-components';\nimport { dateFormatter } from 'utils/date';\nimport { useQuery } from '@tanstack/react-query';\nimport { BLOG_ICON, BLOG_KOREAN } from 'constants/blog';\n\ntype Props = {\n  writingId: number;\n};\n\nconst WritingPropertySection = ({ writingId }: Props) => {\n  const { data: writingInfo } = useQuery(['writingProperties', writingId], () =>\n    getWritingProperties(writingId),\n  );\n\n  if (!writingInfo) return null;\n\n  return (\n    <S.WritingPropertySection>\n      <S.SectionTitle>정보</S.SectionTitle>\n      <S.InfoList>\n        <S.Info>\n          <S.InfoTitle>글 정보</S.InfoTitle>\n          <S.InfoContent>\n            <S.PropertyRow>\n              <S.PropertyName>\n                <CalendarIcon width={12} height={12} />\n                생성 날짜\n              </S.PropertyName>\n              <S.PropertyValue>\n                {dateFormatter(writingInfo.createdAt, 'YYYY/MM/DD HH:MM')}\n              </S.PropertyValue>\n            </S.PropertyRow>\n          </S.InfoContent>\n        </S.Info>\n        {Boolean(writingInfo.publishedDetails.length) && (\n          <S.Info>\n            <S.InfoTitle>발행 정보</S.InfoTitle>\n            <S.InfoContent>\n              {writingInfo.publishedDetails.map(\n                ({ blogName, publishedAt, tags, publishedUrl }, index) => {\n                  return (\n                    <Fragment key={index}>\n                      <S.PropertyRow>\n                        <S.PropertyName>\n                          {BLOG_ICON[blogName]} {BLOG_KOREAN[blogName]}\n                        </S.PropertyName>\n                      </S.PropertyRow>\n                      {publishedUrl && ( // 해당 기능 추가 이전에 발행된 글에 대응하는 로직입니다. 이전에 발행된 글들은 발행 링크가 없고, 재발행 이외에는 받아 올 수 있는 방법이 없어서 불가피하게 해당 코드를 작성했습니다.\n                        <S.PropertyRow>\n                          <S.PropertyName>\n                            <HyperlinkIcon width={10} height={10} />\n                            발행 링크\n                          </S.PropertyName>\n                          <S.PropertyValue>\n                            <S.BlogLink href={publishedUrl} target='_blank' rel='external'>\n                              블로그로 이동하기\n                            </S.BlogLink>\n                          </S.PropertyValue>\n                        </S.PropertyRow>\n                      )}\n                      <S.PropertyRow>\n                        <S.PropertyName>\n                          <CalendarIcon width={12} height={12} />\n                          발행일\n                        </S.PropertyName>\n                        <S.PropertyValue>\n                          {dateFormatter(publishedAt, 'YYYY/MM/DD HH:MM')}\n                        </S.PropertyValue>\n                      </S.PropertyRow>\n                      <S.PropertyRow>\n                        <S.PropertyName>\n                          <TagIcon width={12} height={12} />\n                          태그\n                        </S.PropertyName>\n                        <S.PropertyValue>\n                          {tags.map((tag) => (\n                            <Tag key={tag} removable={false}>\n                              {tag}\n                            </Tag>\n                          ))}\n                        </S.PropertyValue>\n                      </S.PropertyRow>\n                      <S.Spacer />\n                    </Fragment>\n                  );\n                },\n              )}\n            </S.InfoContent>\n          </S.Info>\n        )}\n      </S.InfoList>\n    </S.WritingPropertySection>\n  );\n};\n\nexport default WritingPropertySection;\n\nconst S = {\n  WritingPropertySection: styled.section`\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n  `,\n  SectionTitle: styled.h1`\n    display: flex;\n    gap: 1.5rem;\n    font-size: 1.5rem;\n    font-weight: 700;\n    line-height: 1.5rem;\n  `,\n  InfoList: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  `,\n  Info: styled.div`\n    color: ${({ theme }) => theme.color.gray7};\n  `,\n  InfoTitle: styled.h2`\n    color: ${({ theme }) => theme.color.gray8};\n    font-size: 1.3rem;\n    font-weight: 600;\n    line-height: 1.3rem;\n  `,\n  InfoContent: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 1.8rem;\n    padding: 1.6rem 0.9rem;\n    font-size: 1.3rem;\n    line-height: 1.3rem;\n  `,\n  PropertyRow: styled.div`\n    display: flex;\n    align-items: center;\n  `,\n  PropertyName: styled.div`\n    display: flex;\n    align-items: center;\n    flex-shrink: 0;\n    gap: 0.4rem;\n    width: 9.5rem;\n    color: ${({ theme }) => theme.color.gray8};\n    font-size: 1.3rem;\n    font-weight: 600;\n\n    svg {\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  `,\n  PropertyValue: styled.div`\n    color: ${({ theme }) => theme.color.gray10};\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.2rem;\n  `,\n  Spacer: styled.div`\n    height: 0.8rem;\n  `,\n\n  BlogLink: styled.a`\n    color: ${({ theme }) => theme.color.gray12};\n    font-weight: 500;\n  `,\n};\n","import MediumPublishingPropertySection from 'components/PublishingPropertySection/MediumPublishingPropertySection';\nimport PublishingSection from 'components/PublishingSection/PublishingSection';\nimport { css, styled } from 'styled-components';\nimport { useCurrentTab } from './useCurrentTab';\nimport { InfoIcon, PublishingIcon } from 'assets/icons';\nimport { useEffect, useState } from 'react';\nimport { Blog } from 'types/domain';\nimport WritingPropertySection from 'components/WritingPropertySection/WritingPropertySection';\nimport { useGlobalStateValue, useSetGlobalState } from '@yogjin/react-global-state';\nimport { activeWritingInfoState, rightDrawerState } from 'globalState';\nimport TistoryPublishingPropertySection from 'components/PublishingPropertySection/TistoryPublishingPropertySection';\n\nexport enum TabKeys {\n  WritingProperty = 'WritingProperty',\n  Publishing = 'Publishing',\n  MediumPublishingProperty = 'MediumPublishingProperty',\n  TistoryPublishingProperty = 'TistoryPublishingProperty',\n}\n\nconst ariaLabelFromTabKeys = {\n  [TabKeys.WritingProperty]: '글 정보',\n  [TabKeys.Publishing]: '발행 하기',\n  [TabKeys.MediumPublishingProperty]: '미디엄 발행 정보',\n  [TabKeys.TistoryPublishingProperty]: '티스토리 발행 정보',\n};\n\ntype Props = {\n  isPublishingSectionActive?: boolean;\n};\n\nconst WritingSideBar = ({ isPublishingSectionActive = true }: Props) => {\n  const activeWritingInfo = useGlobalStateValue(activeWritingInfoState);\n  const writingId = activeWritingInfo?.id;\n  const { currentTab, selectCurrentTab } = useCurrentTab<TabKeys>(TabKeys.WritingProperty);\n  const [publishTo, setPublishTo] = useState<Blog | null>(null);\n  const setIsRightDrawerOpen = useSetGlobalState(rightDrawerState);\n\n  useEffect(() => {\n    return () => setIsRightDrawerOpen(false);\n  }, []);\n\n  useEffect(() => {\n    selectCurrentTab(TabKeys.WritingProperty);\n  }, [writingId]);\n\n  if (!writingId) return;\n\n  const selectPublishTo = (blog: Blog) => {\n    setPublishTo(blog);\n  };\n\n  const menus = [\n    {\n      key: TabKeys.WritingProperty,\n      label: <InfoIcon width={24} height={24} />,\n      content: <WritingPropertySection writingId={writingId} />,\n    },\n    ...(isPublishingSectionActive\n      ? [\n          {\n            key: TabKeys.Publishing,\n            label: <PublishingIcon width={24} height={24} />,\n            content: (\n              <PublishingSection\n                onTabClick={selectCurrentTab}\n                onBlogButtonClick={selectPublishTo}\n              />\n            ),\n          },\n          {\n            key: TabKeys.MediumPublishingProperty,\n            label: 'MediumPublishingProperty',\n            content: publishTo && (\n              <MediumPublishingPropertySection\n                writingId={writingId}\n                publishTo={publishTo}\n                selectCurrentTab={selectCurrentTab}\n              />\n            ),\n          },\n          {\n            key: TabKeys.TistoryPublishingProperty,\n            label: 'TistoryPublishingProperty',\n            content: publishTo && (\n              <TistoryPublishingPropertySection\n                writingId={writingId}\n                publishTo={publishTo}\n                selectCurrentTab={selectCurrentTab}\n              />\n            ),\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <S.SidebarContainer>\n      <S.MenuTabList role='tablist'>\n        {menus\n          .filter(\n            (menu) =>\n              ![TabKeys.TistoryPublishingProperty, TabKeys.MediumPublishingProperty].includes(\n                menu.key,\n              ),\n          )\n          .map((menu) => (\n            <S.Tab key={menu.key} role='tab'>\n              <S.Button\n                $checked={currentTab === menu.key}\n                onClick={() => selectCurrentTab(menu.key)}\n                aria-label={ariaLabelFromTabKeys[menu.key]}\n              >\n                {menu.label}\n              </S.Button>\n            </S.Tab>\n          ))}\n      </S.MenuTabList>\n      <div role='tabpanel' aria-labelledby={currentTab}>\n        {menus.find((menu) => menu.key === currentTab)?.content}\n      </div>\n    </S.SidebarContainer>\n  );\n};\n\nexport default WritingSideBar;\n\nconst S = {\n  SidebarContainer: styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    overflow: hidden;\n  `,\n  MenuTabList: styled.ul`\n    display: flex;\n    gap: 0.4rem;\n    padding: 0.5rem;\n    border-radius: 8px;\n    background-color: ${({ theme }) => theme.color.gray5};\n  `,\n  Tab: styled.li`\n    display: flex;\n    width: 100%;\n  `,\n  Label: styled.label`\n    input[type='radio']:checked + & {\n      transition: all 0.2s ease-in;\n      background-color: ${({ theme }) => theme.color.gray1};\n    }\n  `,\n  Button: styled.button<{ $checked: boolean }>`\n    display: flex;\n\n    justify-content: center;\n    align-items: center;\n    padding: 0.8rem;\n    width: 100%;\n    border-radius: 8px;\n\n    ${({ $checked }) =>\n      $checked\n        ? css`\n            transition: all 0.2s ease-in;\n            background-color: ${({ theme }) => theme.color.gray1};\n          `\n        : css`\n            &:hover {\n              background-color: ${({ theme }) => theme.color.gray6};\n            }\n          `}\n  `,\n};\n","import { styled } from 'styled-components';\n\nexport const StoryContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  gap: 28px;\n`;\n\nexport const StoryItemContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 12px;\n`;\n\nexport const StoryItemContainerRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 12px;\n`;\n\nexport const StoryItemTitle = styled.h3`\n  color: ${({ theme }) => theme.color.gray9};\n  font-size: 12px;\n  font-weight: 400;\n  text-transform: uppercase;\n`;\n"],"names":[],"sourceRoot":""}